/* ASM */
import "../asm/cc_text_speed.ccs"
import "../asm/bg_viewer.ccs"
import "../asm/custom_windows_standalone.ccs"
/* Enums */
import "../enums/flags.ccs"
import "../enums/labels.ccs"
import "../enums/party.ccs"
import "../enums/items.ccs"
import "../enums/windows.ccs"

/* Menu Options */

// Overwrite selected menu option with purple background color
command Highlight(text) 
{ 
	SetTextSpeedInstant() 
	clearline 
	sound(SND_CURSORCONFIRM) 
	" " text_color(6) "  {text}" 
	SetTextSpeed(1) 
}

// Menu that allows for flag-dependent options
// and running specific scripts per highlighted menu item
command GotoIfFlag(flg, addr) { "[06 {short flg} {long addr}]" }
command SwitchGoto(n) { "[09 {byte n}]" }
command SwitchCase(addr) { long addr }
command MenuOptionWithCallback(text, callback) { "[19 02 {text} 01 {long callback}]" }
command DisplayVertical(n) { "[1C 0C {byte n}]" }


/* Window Printing */

// Get current Text Speed as argument
command GetTextSpeed() { gettextspeed }
// Set Text Speed
command SetTextSpeed(num) { settextspeed(num) }
// Set Text Speed to Zero
command SetTextSpeedInstant() { store_registers counter_zero ctoarg SetTextSpeed(0) load_registers }
// Show description of selected item in desc window
command SetDescription(countNo, prevWndType, DescLabel)
{ 
	SetTextSpeedInstant()
	counter(countNo)
	ctoarg
	call(DescLabel)
	window_switch(prevWndType)
	SetTextSpeed(1)
	eob
}

/* Register Management */
// The following are built-in commands:
// 
//command store_registers { "[1B 05]" } (Save current count/arg/result registers to RAM)
// 
//command load_registers { "[1B 06]" } (Retreive count/arg/result registers from RAM)
// 
// ctoarg (Load count value into arg for use as a parameter)
// 
// counter_zero (Reset counter to zero)

// Compare register value, returning a result of 0 or 1
command compare_register(num, reg) { "[18 07 {long num} {byte reg}]" }
command result_is_greaterthan_orequal(num) { compare_register(num, 0) }
command arg_is_greaterthan_orequal(num) { compare_register(num, 1) }
command counter_is_greaterthan_orequal(num) { compare_register(num, 2) }

/* Window Management */

// (Re)open/focus specific window while retaining register values
command OpenWnd(wndType)
{
	window_open(wndType)
	load_registers
}

// Close specific window while retaining register values
command CloseWnd(wndType)
{
	store_registers
	window_close(wndType)
}

// Open Mod Menu window and set flag that it's open
command OpenFlagWnd(wndType, flg) { OpenWnd(wndType) set(flg) }

// Closes a window if a flag indicates that it's open
// (to prevent crashing from attempting to close unopened windows)
command CloseFlagWnd(wndType, flg) 
{ 
	store_registers
	if flag flg { CloseWnd(wndType) unset(flg) }
	load_registers
}

// Open a specific flag-dependent custom window
command OpenModMenuWnd() { CloseModMenuWnd() OpenFlagWnd(wnd_ModMenu, flg_ModMenuWnd) }
command OpenModMenu2Wnd(height) { CloseModMenu2Wnd() CustomWindow_open(wnd_ModMenu2, 4, 1, 15, height) load_registers set(flg_ModMenuWnd2) }
command OpenModMenuConfirmWnd() { CloseModMenuConfirmWnd() OpenFlagWnd(wnd_ModMenuConfirm, flg_ModMenuConfirmWnd) }
command OpenKeyItemWnd() { CloseKeyItemWnd() OpenFlagWnd(wnd_KeyItems, flg_KeyItemsWnd) }
command OpenItemWnd() { CloseItemWnd() OpenFlagWnd(wnd_Item, flg_ItemWnd) }
command OpenDebugWnd() { CloseDebugWnd() SetTextSpeedInstant() OpenFlagWnd(wnd_ModMenuDebug, flg_ModMenuDebugWnd) }
command OpenKeyItemDescWnd() { CloseKeyItemDescWnd() OpenFlagWnd(wnd_KeyItemDescription, flg_KeyItemDescWnd) }

// Hide unnecessary custom windows that may be open
command CloseModMenuWnd() { CloseFlagWnd(wnd_ModMenu, flg_ModMenuWnd) } // main mod menu window to the left
command CloseModMenu2Wnd() { CloseFlagWnd(wnd_ModMenu2, flg_ModMenuWnd2) } // smaller mod menu window to the right
command CloseModMenuConfirmWnd() { CloseFlagWnd(wnd_ModMenuConfirm, flg_ModMenuConfirmWnd) } // confirmation of choice window
command CloseKeyItemWnd() { CloseFlagWnd(wnd_KeyItems, flg_KeyItemsWnd) } // duplicate goods window only for key items
command CloseItemWnd() { CloseFlagWnd(wnd_Item, flg_ItemWnd) } // action menu for use, help etc.
command CloseDebugWnd() { CloseFlagWnd(wnd_ModMenuDebug, flg_ModMenuDebugWnd) } // debug print window
command CloseKeyItemDescWnd() { CloseFlagWnd(wnd_KeyItemDescription, flg_KeyItemDescWnd) } // window below key items window for description
// Hide all possible custom windows that may be open
command CloseAllModMenuWnd()
{ 
	CloseModMenuWnd() CloseModMenu2Wnd() 
	CloseModMenuConfirmWnd() CloseKeyItemWnd() 
	CloseItemWnd() CloseDebugWnd() CloseKeyItemDescWnd() 
}

// Show debug info if Debug flag is on,
// then switch back to active window
command DebugPrint(prevWndType)
{
	store_registers
	if flag flg_Debug
	{
		OpenDebugWnd()
		Lbl(lbl_Debug)
        load_registers
        "@Argument: {number(argument)}" newline
		load_registers ctoarg
		"@Counter: {number(argument)}" newline
		load_registers rtoarg
		"@Result: {number(argument)}" pause(60)
		// Go back to original window
		OpenWnd(prevWndType)
		SetTextSpeed(1)
	}
	load_registers
}

// Temporary window showing confirmation of action
// waits about a second, then closes and returns to previous window
command NotificationWnd(prevWndType, string)
{
	store_registers
	window_open(wnd_ModMenuNotification)
	SetTextSpeedInstant()
	load_registers
	Lbl(lbl_System)
	"{string}"
	SetTextSpeed(1)
	"|||" // Pause for about a second
	window_close(wnd_ModMenuNotification)
	window_switch(prevWndType)
	load_registers
}

// Redraw screen using giant window
command RefreshScreen(prevWndType)
{
	window_open(wnd_FullScreen)
	window_close(wnd_FullScreen)
	window_switch(prevWndType)
}
// Same as above, but don't return to previous window
command RefreshScreen_NoPrevWnd()
{
	window_open(wnd_FullScreen)
	window_close(wnd_FullScreen)
}

/* Input Confirmation */

// Prompts user to enter a number, saves to argument register, then calls procedure if Yes
command ConfirmNumber(wndLabel, digits, string, yesLabel)
{
	CloseModMenuConfirmWnd()
	OpenModMenuConfirmWnd()
	SetTextSpeedInstant()
	Lbl(wndLabel)
	input(digits)
	rtoarg
	store_registers
	" " newline
	"@{string}" newline
	" {number(argument)}" newline
	menu 2
	{
		"Yes": { load_registers call(yesLabel) }
default "No": { }
	}
	CloseModMenuConfirmWnd()
	SetTextSpeed(1)
}

// Asks the user something, then  go to procedure if Yes
command ConfirmYesNo(wndLabel, string, yesLabel)
{
	CloseModMenuConfirmWnd()
	OpenModMenuConfirmWnd()
	Lbl(wndLabel)
	SetTextSpeedInstant()
	"@{string}" newline
	menu 2
	{
		"Yes": { goto(yesLabel) }
		default "No": { }
	}
	CloseModMenuConfirmWnd()
	SetTextSpeed(1)
}


/* Window Labels */

// Preset title commands for strings
command Lbl(text) { "[18 0C 00 {byte[0] text} {byte[1] text} {byte[2] text} 00]" clearline }
command PtyLbl(partyMemberID) { "[18 0B 00 {byte[0] partyMemberID} 05]" clearline }

// Set the selected party member to the name of the new window
command SetPartyLabel()
{
	if counter_is(pty_Ness)  { PtyLbl(pty_Ness) }
	else if counter_is(pty_Paula) { PtyLbl(pty_Paula) }
	else if counter_is(pty_Jeff)  { PtyLbl(pty_Jeff) }
	else if counter_is(pty_Poo)   { PtyLbl(pty_Poo) }
	else if counter_is(pty_Pokey) { Lbl(lbl_Pokey) }
	else if counter_is(pty_Picky) { Lbl(lbl_Picky) }
	else if counter_is(pty_King)  { PtyLbl(pty_King) }
	else if counter_is(pty_Tony)  { Lbl(lbl_Tony) }
	else if counter_is(pty_BubbleMonkey) { Lbl(lbl_BubbleMonkey) }
	else if counter_is(pty_BrickRoad) { Lbl(lbl_BrickRoad) }
	else if counter_is(pty_FlyingMan) { Lbl(lbl_FlyingMan) }
	else if counter_is(pty_TeddyBear) { Lbl(lbl_TeddyBear) }
	else if counter_is(pty_PlushBear) { Lbl(lbl_PlushBear) }
	else { Lbl(lbl_Party) }
}


/* Battle Backgrounds */

command ShowBattleBG(layerNumber, distortionNumber, letterBox) { show_battle_bg(layerNumber, distortionNumber, letterBox) }
command HideBattleBG() { hide_battle_bg() }