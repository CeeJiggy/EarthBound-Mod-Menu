/* Enums */
import "../../enums/flags.ccs"
import "../../enums/labels.ccs"
import "../../enums/items.ccs"
import "../../enums/party.ccs"
import "../../enums/windows.ccs"
/* Commands */
import "../../commands/window_cmds.ccs"
import "../../commands/flag_cmds.ccs"
import "../../commands/item_cmds.ccs"
import "../../commands/health_cmds.ccs"

command e(label) "{long label}"

GoodsMenu:
	CloseAllModMenuWnd()
    OpenModMenu2Wnd(18)
	Lbl(lbl_Goods)
	menu 1 {
		"View Lists": { goto(ItemTypeList) }
		"Enter ID":  { goto(ItemID) }
		"Storage":   { goto(StorageMenu) }
		"ATM Machine": { goto(ATMMachine) }
		"Add Money": { goto(AddMoney) }
		default "Back": { goto(modmenu.ModMenu) }
	}
goto(GoodsMenu)

ATMMachine:
	window_open(1) "[19 02]Withdrawal[02][19 02]Deposit[02][1C 07 02][11]{clearline}[09 02 {e(data_17.l_0xc62e6d)} {e(data_17.l_0xc62d93)}]" window_close(1)
goto(GoodsMenu)

AddMoney:
	ConfirmNumber(lbl_AddMoney, 4, "Add this amount?", AddMoneyConfirm)
goto(GoodsMenu)

AddMoneyConfirm:
	givemoney(0) sound(SND_KACHING)
eob

ItemTypeList:
	CloseModMenu2Wnd()
	CloseKeyItemWnd()
	OpenModMenu2Wnd(18)
	Lbl(lbl_Goods)
	menu 1 {
		"Consumables": { goto(ConsumableItemList) }
		"Equips": { goto(EquipItemTypeList) }
		"Passives":   { goto(PassiveItemList) }
		"Offensive":   { goto(OffensiveItemList) }
		"Key Items":   { goto(KeyItemList) }
		"Broken": { goto(BrokenItemList) }
		"Inventions": { goto(InventionsItemList) }
		default "Back": { goto(GoodsMenu) }
	}
goto(ItemTypeList)

ConsumableItemList:
	OpenKeyItemWnd()
	Lbl(lbl_Consumables)
	menu 2 {
		"Croissant": { counter(item_Croissant) call(GiveItemID) }
		"Bag of Fries": { counter(item_Bag_Of_Fries) call(GiveItemID) }
		"Hamburger": { counter(item_Hamburger) call(GiveItemID) }
		"Double Burger": { counter(item_Burger_Double) call(GiveItemID) }
		"Bread Roll": { counter(item_Bread_Roll) call(GiveItemID) }
		"Pizza": { counter(item_Pizza) call(GiveItemID) }
		"Large Pizza": { counter(item_Pizza_Large) call(GiveItemID) }
		"PSI Caramel": { counter(item_Psi_Caramel) call(GiveItemID) }
		"Magic Truffle": { counter(item_Magic_Truffle) call(GiveItemID) }
		"Skip Sandwich DX": { counter(item_Skip_Sandwich_Dx) call(GiveItemID) }
		"Water Bottle DX": { counter(item_Water_Bottle_Dx) call(GiveItemID) }
		"Rice Gruel Bowl": { counter(item_Bowl_Rice_Gruel) call(GiveItemID) }
		"Brain Food Lunch": { counter(item_Lunch_Brain_Food) call(GiveItemID) }
		"Cup of Lifenoodles": { counter(item_Cup_Lifenoodles) call(GiveItemID) }
		default "Back": { goto(ItemTypeList) }
	}
goto(ConsumableItemList)

PassiveItemList:
	OpenKeyItemWnd()
	Lbl(lbl_Passives)
	menu 2 {
		"Franklin Badge": { counter(item_Badge_Franklin) call(GiveItemID) }
		"Teddy Bear": { counter(item_Bear_Teddy) call(GiveItemID) }
		"Super Plush Bear": { counter(item_Bear_Super_Plush) call(GiveItemID) }
		"Brain Stone": { counter(item_Brain_Stone) call(GiveItemID) }
		"Bicycle": { counter(item_Bicycle) call(GiveItemID) }
		"ATM Card": { counter(item_Atm_Card) call(GiveItemID) }
		"Exit Mouse": { counter(item_Exit_Mouse) call(GiveItemID) }
		"Town Map": { counter(item_Town_Map) call(GiveItemID) }
		default "Back": { goto(ItemTypeList) }
	}
goto(PassiveItemList)

OffensiveItemList:
	OpenKeyItemWnd()
	Lbl(lbl_Offensive)
	menu 2 {
		"Snake Bag": { counter(item_Snake_Bag) call(GiveItemID) }
		"Mummy Wrap": { counter(item_Mummy_Wrap) call(GiveItemID) }
		"Bottle Rocket": { counter(item_Bottle_Rocket) call(GiveItemID) }
		"Big Bottle Rocket": { counter(item_Bottle_Rocket_Multi) call(GiveItemID) }
		"Multi Bottle Rocket": { counter(item_Bottle_Rocket_Multi) call(GiveItemID) }
		"Bomb": { counter(item_Bomb) call(GiveItemID) }
		"Super Bomb": { counter(item_Bomb_Super) call(GiveItemID) }
		"Insecticide Spray": { counter(item_Spray_Insecticide) call(GiveItemID) }
		"Rust Promoter": { counter(item_Rust_Promoter) call(GiveItemID) }
		"Rust Promoter DX": { counter(item_Rust_Promoter_Dx) call(GiveItemID) }
		"Pair of Dirty Socks": { counter(item_Socks_Dirty_Pair) call(GiveItemID) }
		"Stag Beetle": { counter(item_Beetle_Stag) call(GiveItemID) }
		"Pharaoh's Curse": { counter(item_Pharoah_Curse) call(GiveItemID) }
		"Monkey's Love": { counter(item_Monkey_Love) call(GiveItemID) }
		default "Back": { goto(ItemTypeList) }
	}
goto(OffensiveItemList)

KeyItemList:
	OpenKeyItemWnd()
	Lbl(lbl_Passives)
	menu 2 {
		"Sound Stone": { counter(item_Sound_Stone) call(GiveKeyItemID) }
		"Shack Key": { counter(item_Key_Shack) call(GiveKeyItemID) }
		"Bicycle": { counter(item_Bicycle) call(GiveKeyItemID) }
		"Town Map": { counter(item_Town_Map) call(GiveKeyItemID) }
		"Receiver Phone": { counter(item_Receiver_Phone) call(GiveKeyItemID) }
		"Pencil Eraser": { counter(item_Eraser_Pencil) call(GiveKeyItemID) }
		"Cabin Key": { counter(item_Key_Cabin) call(GiveKeyItemID) }
		"Wad of Bills": { counter(item_Wad_Bills) call(GiveKeyItemID) }
		"Zombie Paper": { counter(item_Zombie_Paper) call(GiveKeyItemID) }
		"Bad Key Machine": { counter(item_Bad_Key_Machine) call(GiveKeyItemID) }
		"Eraser Eraser": { counter(item_Eraser_Eraser) call(GiveKeyItemID) }
		"Diamond": { counter(item_Diamond) call(GiveKeyItemID) }
		"More...": { goto(KeyItemList2) call(GiveKeyItemID) }
		default "Back": { goto(ItemTypeList) }
	}
goto(KeyItemList)

KeyItemList2:
	OpenKeyItemWnd()
	Lbl(lbl_Passives)
	menu 2 {
		"Signed Banana": { counter(item_Signed_Banana) call(GiveKeyItemID) }
		"Hieroglyph Copy": { counter(item_Hieroglyph_Copy) call(GiveKeyItemID) }
		"Carrot Key": { counter(item_Key_Carrot) call(GiveKeyItemID) }
		"Tower Key": { counter(item_Key_Tower) call(GiveKeyItemID) }
		"Hawk Eye": { counter(item_Hawk_Eye) call(GiveKeyItemID) }
		"Shyness Book": { counter(item_Shyness_Book) call(GiveKeyItemID) }
		"Tendakraut": { counter(item_Tendakraut) call(GiveKeyItemID) }
		"Meteorite Piece": { counter(item_Meteorite_Piece) call(GiveKeyItemID) }
		"Bubble Gum": { counter(item_Bubble_Gum) call(GiveKeyItemID) }
		"Backstage Pass": { counter(item_Pass_Backstage) call(GiveKeyItemID) }
		"Yogurt Dispenser": { counter(item_Yogurt_Dispenser) call(GiveKeyItemID) }
		"Show Ticket": { counter(item_Show_Ticket) call(GiveKeyItemID) }
		default "Back": { goto(KeyItemList) }
	}
goto(KeyItemList2)
	
EquipItemTypeList:
	CloseModMenu2Wnd()
	OpenModMenu2Wnd(18)
	Lbl(lbl_Equips)
	menu 1 {
		"Weapons":  { goto(WeaponPartyList) }
		"Arms": { goto(ArmsEquipList) }
		"Body":   { goto(BodyEquipList) }
		"Other":   { goto(OtherEquipList) }
		default "Back": { goto(ItemTypeList) }
	}
goto(EquipItemTypeList)

WeaponPartyList:
	OpenKeyItemWnd()
	Lbl(lbl_Weapons)
	menu 2 {
		"Ness": { goto(NessWeaponList) }
		"Paula": { goto(PaulaWeaponList) }
		"Jeff": { goto(JeffWeaponList) }
		"Poo": { goto(PooWeaponList) }
		default "Back": { goto(EquipItemTypeList) }
	}
goto(WeaponPartyList)

NessWeaponList:
	OpenKeyItemWnd()
	Lbl(lbl_Weapons)
	menu 2 {
		"Cracked Bat": { counter(item_Bat_Cracked) call(GiveItemID) }
		"Tee Ball Bat": { counter(item_Bat_Tee_Ball) call(GiveItemID) }
		"Sand Lot Bat": { counter(item_Bat_Sand_Lot) call(GiveItemID) }
		"Minor League Bat": { counter(item_Bat_Minor_League) call(GiveItemID) }
		"Mr. Baseball Bat": { counter(item_Bat_Mr_Baseball) call(GiveItemID) }
		"Big League Bat": { counter(item_Bat_Big_League_A) call(GiveItemID) }
		"Hall Of Fame Bat": { counter(item_Bat_Fame) call(GiveItemID) }
		"Legendary Bat": { counter(item_Bat_Legendary) call(GiveItemID) }
		"Gutsy Bat": { counter(item_Bat_Gutsy) call(GiveItemID) }
		"Casey Bat": { counter(item_Bat_Casey) call(GiveItemID) }
		"Yo-yo": { counter(item_Yoyo) call(GiveItemID) }
		"Trick Yo-yo": { counter(item_Yoyo_Trick) call(GiveItemID) }
		"Combat Yo-yo": { counter(item_Yoyo_Combat) call(GiveItemID) }
		default "Back": { goto(WeaponPartyList) }
	}
goto(NessWeaponList)

PaulaWeaponList:
	OpenKeyItemWnd()
	Lbl(lbl_Weapons)
	menu 2 {
		"Fry Pan": { counter(item_Pan_Fry) call(GiveItemID) }
		"Thick Fry Pan": { counter(item_Pan_Thick_Fry) call(GiveItemID) }
		"Deluxe Fry Pan": { counter(item_Pan_Deluxe_Fry) call(GiveItemID) }
		"Chef Fry Pan": { counter(item_Pan_Chef_Fry) call(GiveItemID) }
		"French Fry Pan": { counter(item_Pan_French_Fry) call(GiveItemID) }
		"Magic Fry Pan": { counter(item_Pan_Magic_Fry) call(GiveItemID) }
		"Holy Fry Pan": { counter(item_Pan_Holy_Fry) call(GiveItemID) }
		default "Back": { goto(WeaponPartyList) }
	}
goto(PaulaWeaponList)

JeffWeaponList:
	OpenKeyItemWnd()
	Lbl(lbl_Weapons)
	menu 2 {
		"Pop Gun": { counter(item_Gun_Pop) call(GiveItemID) }
		"Stun Gun": { counter(item_Gun_Stun) call(GiveItemID) }
		"Toy Air Gun": { counter(item_Gun_Toy_Air) call(GiveItemID) }
		"Magnum Air Gun": { counter(item_Gun_Magnum_Air) call(GiveItemID) }
		"Zip Gun": { counter(item_Gun_Zip) call(GiveItemID) }
		"Laser Gun": { counter(item_Gun_Laser) call(GiveItemID) }
		"Hyper Beam": { counter(item_Beam_Hyper) call(GiveItemID) }
		"Crusher Beam": { counter(item_Beam_Hyper) call(GiveItemID) }
		"Spectrum Beam": { counter(item_Beam_Spectrum) call(GiveItemID) }
		"Death Ray": { counter(item_Ray_Death) call(GiveItemID) }
		"Baddest Beam": { counter(item_Beam_Baddest) call(GiveItemID) }
		"Moon Beam": { counter(item_Gun_Moon_Beam) call(GiveItemID) }
		"Gaia Beam": { counter(item_Beam_Gaia) call(GiveItemID) }
		default "Back": { goto(WeaponPartyList) }
	}
goto(JeffWeaponList)

PooWeaponList:
	OpenKeyItemWnd()
	Lbl(lbl_Weapons)
	menu 2 {
		"Slingshot": { counter(item_Slingshot) call(GiveItemID) }
		"Bionic slingshot": { counter(item_Slingshot_Bionic) call(GiveItemID) }
		"Sword of Kings": { counter(item_Sword_Of_Kings) call(GiveItemID) }
		"Bracer of Kings": { counter(item_Bracer_Of_Kings) call(GiveItemID) }
		"Cloak of Kings": { counter(item_Cloak_Of_Kings) call(GiveItemID) }
		"Diadem of Kings": { counter(item_Diadem_Of_Kings) call(GiveItemID) }
		default "Back": { goto(WeaponPartyList) }
	}
goto(PooWeaponList)

ArmsEquipList:
	OpenKeyItemWnd()
	Lbl(lbl_ArmsEquips)
	menu 2 {
		"Cheap Bracelet": { counter(item_Bracelet_Cheap) call(GiveItemID) }
		"Copper Bracelet": { counter(item_Bracelet_Copper) call(GiveItemID) }
		"Silver Bracelet": { counter(item_Bracelet_Silver) call(GiveItemID) }
		"Gold Bracelet": { counter(item_Bracelet_Gold) call(GiveItemID) }
		"Platinum Band": { counter(item_Band_Platinum_A) call(GiveItemID) }
		"Diamond Band": { counter(item_Band_Diamond_A) call(GiveItemID) }
		"Pixie Band": { counter(item_Bracelet_Pixie) call(GiveItemID) }
		"Cherub Band": { counter(item_Band_Cherub) call(GiveItemID) }
		"Goddess Band": { counter(item_Band_Goddess) call(GiveItemID) }
		"Bracer of Kings": { counter(item_Bracer_Of_Kings) call(GiveItemID) }
		default "Back": { goto(EquipItemTypeList) }
	}
goto(ArmsEquipList)

BodyEquipList:
	OpenKeyItemWnd()
	Lbl(lbl_BodyEquips)
	menu 2 {
		"Travel Charm": { counter(item_Charm_Travel) call(GiveItemID) }
		"Great Charm": { counter(item_Charm_Great) call(GiveItemID) }
		"Crystal Charm": { counter(item_Charm_Crystal) call(GiveItemID) }
		"Rabbit's Foot": { counter(item_Rabbits_Foot) call(GiveItemID) }
		"Flame Pendant": { counter(item_Pendant_Flame) call(GiveItemID) }
		"Rain Pendant": { counter(item_Pendant_Rain) call(GiveItemID) }
		"Night Pendant": { counter(item_Pendant_Night) call(GiveItemID) }
		"Sea Pendant": { counter(item_Pendant_Sea) call(GiveItemID) }
		"Star Pendant": { counter(item_Pendant_Star) call(GiveItemID) }
		"Cloak of Kings": { counter(item_Cloak_Of_Kings) call(GiveItemID) }
		default "Back": { goto(EquipItemTypeList) }
	}
goto(BodyEquipList)

OtherEquipList:
	OpenKeyItemWnd()
	Lbl(lbl_OtherEquips)
	menu 2 {
		"Baseball Cap": { counter(item_Cap_Baseball) call(GiveItemID) }
		"Holmes Hat": { counter(item_Hat_Holmes) call(GiveItemID) }
		"MrBaseball Cap": { counter(item_Cap_Mr_Baseball) call(GiveItemID) }
		"Hard Hat": { counter(item_Hat_Hard) call(GiveItemID) }
		"Ribbon": { counter(item_Ribbon) call(GiveItemID) }
		"Red Ribbon": { counter(item_Ribbon_Red) call(GiveItemID) }
		"Goddess Ribbon": { counter(item_Ribbon_Goddess) call(GiveItemID) }
		"Slumber Coin": { counter(item_Coin_Slumber) call(GiveItemID) }
		"Defense Coin": { counter(item_Coin_Defense) call(GiveItemID) }
		"Lucky Coin": { counter(item_Coin_Lucky) call(GiveItemID) }
		"Talisman Coin": { counter(item_Coin_Talisman) call(GiveItemID) }
		"Shiny Coin": { counter(item_Coin_Shiny) call(GiveItemID) }
		"Souvenir Coin": { counter(item_Coin_Souvenir) call(GiveItemID) }
		"Diadem of Kings": { counter(item_Diadem_Of_Kings) call(GiveItemID) }
		default "Back": { goto(EquipItemTypeList) }
	}
goto(OtherEquipList)

BrokenItemList:
	OpenKeyItemWnd()
	Lbl(lbl_Broken)
	menu 2 {
		"Broken Machine": { counter(item_Broken_Machine) call(GiveItemID) }
		"Broken Gadget": { counter(item_Broken_Gadget) call(GiveItemID) }
		"Broken Air Gun": { counter(item_Broken_Air_Gun) call(GiveItemID) }
		"Broken Spray Can": { counter(item_Broken_Spray_Can) call(GiveItemID) }
		"Broken Laser": { counter(item_Broken_Laser) call(GiveItemID) }
		"Broken Iron": { counter(item_Broken_Iron) call(GiveItemID) }
		"Broken Cannon": { counter(item_Broken_Cannon) call(GiveItemID) }
		"Broken Tube": { counter(item_Broken_Tube) call(GiveItemID) }
		"Broken Bazooka": { counter(item_Broken_Bazooka) call(GiveItemID) }
		"Broken Trumpet": { counter(item_Broken_Trumpet) call(GiveItemID) }
		"Broken Harmonica": { counter(item_Broken_Harmonica) call(GiveItemID) }
		"Broken Antenna": { counter(item_Broken_Antenna) call(GiveItemID) }
		default "Back": { goto(ItemTypeList) }
	}
goto(BrokenItemList)

InventionsItemList:
	OpenKeyItemWnd()
	Lbl(lbl_Inventions)
	menu 2 {
		"Counter PSI Unit": { counter(item_Unit_Counter_Psi) call(GiveItemID) }
		"Shield Killer": { counter(item_Shield_Killer) call(GiveItemID) }
		"Bazooka": { counter(item_Bazooka) call(GiveItemID) }
		"Heavy Bazooka": { counter(item_Bazooka_Heavy) call(GiveItemID) }
		"HP Sucker": { counter(item_Hp_Sucker) call(GiveItemID) }
		"Hungry HP Sucker": { counter(item_Hp_Sucker_Hungry) call(GiveItemID) }
		"Xterminator Spray": { counter(item_Spray_Xterminator) call(GiveItemID) }
		"Slime Generator": { counter(item_Slime_Generator) call(GiveItemID) }
		"Defense Shower": { counter(item_Shower_Defense) call(GiveItemID) }
		default "Back": { goto(ItemTypeList) }
	}
goto(InventionsItemList)

StorageMenu:
	CloseModMenu2Wnd()
	OpenModMenu2Wnd(18)
	Lbl(lbl_Storage)
	menu 1
	{
		"Store": { goto(StoreItemMenu) }
		"Take": { goto(TakeItemMenu) }
		default "Back": { goto(GoodsMenu) }
	}
goto(StorageMenu)

// Check If Item Can Be Stored By Escargo Express
// checks the $YYth item in character $XX's inventory.
// returns 0 if storeable and there's room in storage.
// returns 1 if not storeable but there is room.
// returns 2 if storeable but there's no room.
// returns 3 if not storeable and also there's no room.
command EscargotCheck() { "[1D 0C 00 00]" }


StoreItemMenu:
	window_open(wnd_Dialog)
	call(data_14.l_0xc5e456)
	store_registers_global
	if result_is(0) { window_close(wnd_Dialog) goto(StorageMenu) }
	else
	{
		load_registers_global
		EscargotCheck()
		if result_is(0) { load_registers_global "{sound(118)}[1D 12 00 00]" }
	}
	window_close(wnd_Dialog)
goto(StoreItemMenu)

TakeItemMenu:
	CloseAllModMenuWnd()
	window_open(wnd_Dialog)
	"{counter(1)}[19 14][1B 02 {e(NothingStored)}][1D 03 FF][1B 02 {e(InventoryFull)}][18 02][1A 07][1B 02 {e(GoBack)}]{swap}{store_registers_global}[18 02]" call(data_14.l_0xc5e54a) "[1B 02 {e(GoBack)}][1B 05]{window_switch(13)}{window_closetop}{window_switch(1)}[1B 06]{sound(116)}[1D 13 00 00][19 19 00 00]"
	window_close(wnd_Dialog)
goto(TakeItemMenu)

NothingStored:
	window_close(wnd_Dialog)
	NotificationWnd(wnd_Dialog, "No items are in storage.")
goto(StorageMenu)

InventoryFull:
	window_close(13)
	window_close(wnd_Dialog)
	NotifyInventoryFull()
goto(StorageMenu)

GoBack:
	window_close(13)
	window_close(wnd_Dialog)
goto(StorageMenu)

/* ID Entry */

ItemID:
	ConfirmNumber(lbl_Goods, 3, "Receive this item?", GiveItemID)
goto(GoodsMenu)

GiveItemID:
	ctoarg
	GiveItemToParty(argument) 
eob

GiveKeyItemID:
	ctoarg
	GiveKeyItemToParty(argument) 
eob