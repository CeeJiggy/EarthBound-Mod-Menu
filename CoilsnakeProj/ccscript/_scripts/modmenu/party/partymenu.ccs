import "../modmenu.ccs"
import healthmenu
/* Enums */
import "../../enums/flags.ccs"
import "../../enums/labels.ccs"
import "../../enums/party.ccs"
import "../../enums/windows.ccs"
import "../../enums/counter.ccs"
/* Commands */
import "../../commands/window_cmds.ccs"
import "../../commands/flag_cmds.ccs"
import "../../commands/health_cmds.ccs"

PartyMenu: 
{
	OpenModMenu2Wnd(14)
	Lbl(lbl_Party)
		// Workaround for menu items not accepting variables
		SetTextSpeedInstant()
            text_pos(2, 1) "{name(pty_Ness)}" text_pos(2, 2) "{name(pty_Paula)}"
            text_pos(2, 3) "{name(pty_Jeff)}" text_pos(2, 4) "{name(pty_Poo)}"
        text_pos(0, 0) SetTextSpeed(1)
    counter_zero ctoarg
    MenuOptionWithCallback("   All", Set_Count_0)
    MenuOptionWithCallback(" ", Set_Count_1) // Ness
    MenuOptionWithCallback(" ", Set_Count_2) // Paula
    MenuOptionWithCallback(" ", Set_Count_3) // Jeff
    MenuOptionWithCallback(" ", Set_Count_4) // Poo
    MenuOptionWithCallback("   NPCs", Set_Count_5)
	DisplayVertical(1) if not "[11]" { goto(ModMenu) }
	store_registers
	ctoarg swap
	SwitchGoto(5)
		SwitchCase(select_ness)
		SwitchCase(select_paula)
		SwitchCase(select_jeff)
		SwitchCase(select_poo)
		SwitchCase(select_npc)
	select_all:
		counter_zero goto(PartyEditMenu)
	select_ness:
		counter(pty_Ness) goto(PartyEditMenu)
	select_paula:
		counter(pty_Paula) goto(PartyEditMenu)
	select_jeff:
		counter(pty_Jeff) goto(PartyEditMenu)
	select_poo:
		counter(pty_Poo) goto(PartyEditMenu)
	select_npc:
		counter(pty_Ness) goto(PartyMenu_NPCs)
}

PartyMenu_NPCs:
{
	OpenModMenu2Wnd(21)
	Lbl(lbl_NPCs)
	counter_zero ctoarg
	MenuOptionWithCallback("Pokey", Set_Count_5)
	MenuOptionWithCallback("Picky", Set_Count_6)
	MenuOptionWithCallback("King", Set_Count_7)
	MenuOptionWithCallback("Tony", Set_Count_8)
	MenuOptionWithCallback("Bubble Monkey", Set_Count_9)
	MenuOptionWithCallback("Dungeon Man", Set_Count_10)
	MenuOptionWithCallback("Flying Man", Set_Count_11)
	MenuOptionWithCallback("Teddy Bear", Set_Count_16)
	MenuOptionWithCallback("Plush Bear", Set_Count_17)
	DisplayVertical(1) if not "[11]" { goto(PartyMenu) }
	store_registers
	end_npcpartymenu:
		goto(PartyEditMenu)
}

PartyEditMenu:
{
	// Open main Mod Menu 2 Window
	load_registers
	OpenModMenu2Wnd(10)
	SetPartyLabel()
	if not counter_is_greaterthan_orequal(5)
	{
		MenuOptionWithCallback("Health", Set_Count_1)
		MenuOptionWithCallback("Stats", Set_Count_2)
	}
	load_registers
	ctoarg swap
	if result_is(0)
	{
		MenuOptionWithCallback("Add All", Set_Count_3)
		MenuOptionWithCallback("Remove All", Set_Count_4)
	}
	load_registers
	ctoarg swap
	if result_not(0)
	{
		MenuOptionWithCallback("Add", Set_Count_5)
		MenuOptionWithCallback("Remove", Set_Count_6)
	}
	counter_zero ctoarg
	DisplayVertical(1) if not "[11]" { goto(PartyMenu) }
	ctoarg swap
	SwitchGoto(6)
		SwitchCase(chose_health)
		SwitchCase(chose_stats)
		SwitchCase(chose_add_all)
		SwitchCase(chose_remove_all)
		SwitchCase(chose_add)
		SwitchCase(chose_remove)
	swap
	chose_add_all:
		party_add(pty_Ness)
		party_add(pty_Paula)
		party_add(pty_Jeff)
		party_add(pty_Poo)
		load_registers
		SetPartyFlags()
		load_registers
		RefreshScreen(wnd_ModMenu2)
		NotificationWnd(wnd_ModMenu2, "{music(0x7B)}@Everyone joined the party.{pause(90)}{music_resume}")
		load_registers
		goto(PartyEditMenu)
	chose_remove_all:
		get_char_at_pos(1)
		store_registers
		if result_is(pty_Ness) { TempSoloPartyMember(pty_Ness) }
		load_registers
		if result_is(pty_Paula) { TempSoloPartyMember(pty_Paula) }
		load_registers
		if result_is(pty_Jeff) { TempSoloPartyMember(pty_Jeff) }
		load_registers
		if result_is(pty_Poo) { TempSoloPartyMember(pty_Poo) }
		load_registers
		SetPartyFlags()
		load_registers
		RefreshScreen(wnd_ModMenu2)
		NotificationWnd(wnd_ModMenu2, "{sound(SND_STATUSCHANGE)}@Everyone left the party.")
		goto(PartyEditMenu)
	chose_health:
		load_registers goto(HealthMenu)
	chose_stats:
		load_registers goto(StatsMenu)
	chose_add:
		AddToParty()
		goto(PartyEditMenu)
	chose_remove:
		RemoveFromParty()
		goto(PartyEditMenu)
	end_partyeditmenu:
		load_registers
		goto(PartyEditMenu)
}



command AddToParty() 
{
	load_registers
	// Prevent adding more than 2 follower NPCs, which causes graphical glitches
	if not counter_is(1) and not counter_is(2) and not counter_is(3) and not counter_is(4)
	{
		if party_size_smaller_than(4) 
		{
			if party_size_smaller_than(3)
			{
				if party_size_smaller_than(2)
				{
					// 1
					get_char_at_pos(2) if not result_is(0) { get_char_at_pos(3) if not result_is(0) { NotificationWnd(wnd_ModMenu2, "@There are too many followers.") goto(PartyMenu)  } }
				}
				else // 2
				{
					get_char_at_pos(3) if not result_is(0) { get_char_at_pos(4) if not result_is(0) { NotificationWnd(wnd_ModMenu2, "@There are too many followers.") goto(PartyMenu)  } }
				}
			}
			else // 3
			{
				get_char_at_pos(4) if not result_is(0) { get_char_at_pos(5) if not result_is(0) { NotificationWnd(wnd_ModMenu2, "@There are too many followers.") goto(PartyMenu)  } }
			}
		}
		else // 4
		{
			get_char_at_pos(5) if not result_is(0) { get_char_at_pos(6) if not result_is(0) { NotificationWnd(wnd_ModMenu2, "@There are too many followers.") goto(PartyMenu)  } }
		}
	}
	load_registers
	ctoarg
	party_add(argument)
	RefreshScreen(wnd_ModMenu2)
	load_registers
	NotificationWnd(wnd_ModMenu2, "{music(0x7B)}@{name(argument)} joined the party.{pause(90)}{music_resume}.")
	SetPartyFlags()
}

command RemoveFromParty() 
{
	// Check if you can remove from party without causing death loop
	load_registers
	if counter_is(1) or counter_is(2) or counter_is(3) or counter_is(4)
	{
		party_size_smaller_than(2) if result_is(1) { NotificationWnd(wnd_ModMenu, "@Couldn't remove {name(argument)} from party.") }
		else { goto(_remove) }
	}
	else { goto(_remove) }
	goto(_remove_end)
	_remove:
		load_registers
		ctoarg
		party_remove(argument)
		RefreshScreen(wnd_ModMenu2) 
		NotificationWnd(wnd_ModMenu2, "{sound(SND_STATUSCHANGE)}@{name(argument)} left the party.")
		load_registers
		SetPartyFlags()
		load_registers
	_remove_end:
		load_registers
}

StatsMenu:
	OpenModMenu2Wnd(18)
	Lbl(lbl_Status)
	menu 1 {
		"Set Level": { ConfirmNumber(lbl_Level, 3, "Set to this Level?", SetLevel) }
		"Boost EXP": { ConfirmNumber(lbl_EXP, 5, "Increase EXP by this?", BoostEXP) }
		"Boost IQ": { ConfirmNumber(lbl_IQ, 3, "Increase IQ by this?", BoostIQ) }
		"Boost Guts": { ConfirmNumber(lbl_Guts, 3, "Increase Guts by this?", BoostGuts) }
		"Boost Speed": { ConfirmNumber(lbl_Speed, 3, "Increase Speed by this?", BoostSpeed) }
		"Boost Vitality": { ConfirmNumber(lbl_Vitality, 3, "Inc. vitality by this?", BoostVitality) }
		"Boost Luck": { ConfirmNumber(lbl_Luck, 3, "Increase Luck by this?", BoostLuck) }
		 default "Back": { goto(PartyMenu) }
	}
goto(StatsMenu)

command SetStatNotification(partyName, statName) { store_registers NotificationWnd(wnd_ModMenu2, "{sound(SND_STATSUP)}@Set {partyName)}'s {statName} to {number(0)}.") }
command IncStatNotification(partyName, statName) { store_registers NotificationWnd(wnd_ModMenu2, "{sound(SND_STATSUP)}@{partyName)}'s {statName} went up by {number(0)}.") }

SetLevel:
if counter_is(pty_Ness) { change_level(pty_Ness, argument) SetStatNotification(name(pty_Ness), "Level") } 
else if counter_is(pty_Paula) { change_level(pty_Paula, argument) SetStatNotification(name(pty_Paula), "Level") }
else if counter_is(pty_Jeff)  { change_level(pty_Jeff, argument) SetStatNotification(name(pty_Jeff), "Level")  } 
else if counter_is(pty_Poo)   { change_level(pty_Poo, argument) SetStatNotification(name(pty_Poo), "Level")   }
else if counter_is(0)
{
	change_level(pty_Ness, argument) change_level(pty_Paula, argument)
	change_level(pty_Jeff, argument) change_level(pty_Poo, argument)
	SetStatNotification("everyone", "Level")
}
eob

command boost_exp_fixed(char, n) { "[1E 09 {byte char} {long n}]{linebreak}{newline}" }

BoostEXP:
	if counter_is(pty_Ness) { boost_exp_fixed(pty_Ness, argument) IncStatNotification(name(pty_Ness), "EXP") } 
	else if counter_is(pty_Paula) { boost_exp_fixed(pty_Paula, argument) IncStatNotification(name(pty_Paula), "EXP") }
	else if counter_is(pty_Jeff)  { boost_exp_fixed(pty_Jeff, argument) IncStatNotification(name(pty_Jeff), "EXP")  } 
	else if counter_is(pty_Poo)   { boost_exp_fixed(pty_Poo, argument) IncStatNotification(name(pty_Poo), "EXP")   }
	else if counter_is(0)
	{
		boost_exp_fixed(pty_Ness, argument) boost_exp_fixed(pty_Paula, argument)
		boost_exp_fixed(pty_Jeff, argument) boost_exp_fixed(pty_Poo, argument)
		IncStatNotification("everyone", "EXP")
	}
eob

BoostIQ:
	if counter_is(pty_Ness) { boost_iq(pty_Ness, argument) IncStatNotification(name(pty_Ness), "IQ") } 
	else if counter_is(pty_Paula) { boost_iq(pty_Paula, argument) IncStatNotification(name(pty_Paula), "IQ") }
	else if counter_is(pty_Jeff)  { boost_iq(pty_Jeff, argument) IncStatNotification(name(pty_Jeff), "IQ")  } 
	else if counter_is(pty_Poo)   { boost_iq(pty_Poo, argument) IncStatNotification(name(pty_Poo), "IQ")   }
	else if counter_is(0)
	{
		boost_iq(pty_Ness, argument) boost_iq(pty_Paula, argument)
		boost_iq(pty_Jeff, argument) boost_iq(pty_Poo, argument)
		IncStatNotification("everyone", "IQ")
	}
eob

BoostGuts:
	if counter_is(pty_Ness) { boost_guts(pty_Ness, argument) IncStatNotification(name(pty_Ness), "Guts") } 
	else if counter_is(pty_Paula) { boost_guts(pty_Paula, argument) IncStatNotification(name(pty_Paula), "Guts") }
	else if counter_is(pty_Jeff)  { boost_guts(pty_Jeff, argument) IncStatNotification(name(pty_Jeff), "Guts")  } 
	else if counter_is(pty_Poo)   { boost_guts(pty_Poo, argument) IncStatNotification(name(pty_Poo), "Guts")   }
	else if counter_is(0)
	{
		boost_guts(pty_Ness, argument) boost_guts(pty_Paula, argument)
		boost_guts(pty_Jeff, argument) boost_guts(pty_Poo, argument)
		IncStatNotification("everyone", "Guts")
	}
eob

BoostSpeed:
	if counter_is(pty_Ness) { boost_speed(pty_Ness, argument) IncStatNotification(name(pty_Ness), "Speed") } 
	else if counter_is(pty_Paula) { boost_speed(pty_Paula, argument) IncStatNotification(name(pty_Paula), "Speed") }
	else if counter_is(pty_Jeff)  { boost_speed(pty_Jeff, argument) IncStatNotification(name(pty_Jeff), "Speed")  } 
	else if counter_is(pty_Poo)   { boost_speed(pty_Poo, argument) IncStatNotification(name(pty_Poo), "Speed")   }
	else if counter_is(0)
	{
		boost_speed(pty_Ness, argument) boost_speed(pty_Paula, argument)
		boost_speed(pty_Jeff, argument) boost_speed(pty_Poo, argument)
		IncStatNotification("everyone", "Speed")
	}
eob

BoostVitality:
	if counter_is(pty_Ness) { boost_vitality(pty_Ness, argument) IncStatNotification(name(pty_Ness), "Vitality") } 
	else if counter_is(pty_Paula) { boost_vitality(pty_Paula, argument) IncStatNotification(name(pty_Paula), "Vitality") }
	else if counter_is(pty_Jeff)  { boost_vitality(pty_Jeff, argument) IncStatNotification(name(pty_Jeff), "Vitality")  } 
	else if counter_is(pty_Poo)   { boost_vitality(pty_Poo, argument) IncStatNotification(name(pty_Poo), "Vitality")   }
	else if counter_is(0)
	{
		boost_vitality(pty_Ness, argument) boost_vitality(pty_Paula, argument)
		boost_vitality(pty_Jeff, argument) boost_vitality(pty_Poo, argument)
		IncStatNotification("everyone", "Vitality")
	}
eob

BoostLuck:
	if counter_is(pty_Ness) { boost_luck(pty_Ness, argument) IncStatNotification(name(pty_Ness), "Luck") } 
	else if counter_is(pty_Paula) { boost_luck(pty_Paula, argument) IncStatNotification(name(pty_Paula), "Luck") }
	else if counter_is(pty_Jeff)  { boost_luck(pty_Jeff, argument) IncStatNotification(name(pty_Jeff), "Luck")  } 
	else if counter_is(pty_Poo)   { boost_luck(pty_Poo, argument) IncStatNotification(name(pty_Poo), "Luck")   }
	else if counter_is(0)
	{
		boost_luck(pty_Ness, argument) boost_luck(pty_Paula, argument)
		boost_luck(pty_Jeff, argument) boost_luck(pty_Poo, argument)
		IncStatNotification("everyone", "Luck")
	}
eob