//import asm65816
import "../asm/general.ccs"
import "../asm/cc_text_speed.ccs"
import "../asm/bg_viewer.ccs"
/* Mod Menu */
import "enums/flags.ccs"
import "enums/labels.ccs"
import "enums/party.ccs"
import "enums/windows.ccs"
import "commands.ccs"

// Get Text Speed
command GetTextSpeed() { gettextspeed }
// Set Text Speed
command SetTextSpeed(num) { settextspeed(num) }
// Show Battle BG
command ShowBattleBG(layerNumber, distortionNumber, letterBox) { show_battle_bg(layerNumber, distortionNumber, letterBox) }
// Hide Battle BG
command HideBattleBG() { hide_battle_bg() }
// Menu with variable options and description of selected items
// Credit: phoenixbound for designing script
command GotoIfFlag(flg, addr) "[06 {short flg} {long addr}]"
command SwitchGoto(n) "[09 {byte n}]"
command SwitchCase(addr) long addr
command MenuOptionWithCallback(text, callback) "[19 02 {text} 01 {long callback}]"
command DisplayVertical(n) "[1C 0C {byte n}]"
command SetDescription(countNo, prevWndType, DescLabel) { counter_zero ctoarg SetTextSpeed(0) counter(countNo) ctoarg call(DescLabel) SetTextSpeed(1) window_switch(prevWndType) eob }

// Save current count/arg/result registers to RAM
command SaveRAM() { act_to_wram }
// Retreive count/arg/result registers from RAM
command LoadRAM() { wram_to_act }
// Load count value into arg for use as a parameter
command LoadCounter() { ctoarg }
// Reset counter to zero
command ResetCounter() { counter_zero }

// Closes a window if a flag is set that says it's open (to prevent crashing from attempting to close unopened windows)
command CloseFlagWnd(wnd, flg) { LoadCounter() SaveRAM() if flg { window_close(wnd) unset(flg) } }
// Hide unnecessary windows that may be open
command CloseModMenuWnd() { CloseFlagWnd(wnd_ModMenu, flg_ModMenuWnd) } // main mod menu window to the left
command CloseModMenu2Wnd() { CloseFlagWnd(wnd_ModMenu2, flg_ModMenuWnd2) } // smaller mod menu window to the right
command CloseModMenuConfirmWnd() { CloseFlagWnd(wnd_ModMenuConfirm, flg_ModMenuConfirmWnd) } // confirmation of choice window
command CloseKeyItemWnd() { CloseFlagWnd(wnd_KeyItems, flg_KeyItemsWnd) } // duplicate goods window only for key items
command CloseItemWnd() { CloseFlagWnd(wnd_Item, flg_ItemWnd) } // action menu for use, help etc.
command CloseDebugWnd() { CloseFlagWnd(wnd_ModMenuDebug, flg_ModMenuDebugWnd) } // debug print window
command CloseKeyItemDescWnd() { CloseFlagWnd(wnd_KeyItemDescription, flg_KeyItemDescWnd) } // window below key items window for description
// Hide all possible Mod Menu windows that may be open
command CloseAllModMenuWnd() { CloseModMenuWnd() CloseModMenu2Wnd() CloseModMenuConfirmWnd() CloseKeyItemWnd() CloseItemWnd() CloseDebugWnd() CloseKeyItemDescWnd() }

// Open Mod Menu window and set flag that it's open
command OpenFlagWnd(wnd, flg) { window_open(wnd) LoadRAM() LoadCounter() set(flg) }

command OpenModMenuWnd() { OpenFlagWnd(wnd_ModMenu, flg_ModMenuWnd) }
command OpenModMenu2Wnd() { OpenFlagWnd(wnd_ModMenu2, flg_ModMenuWnd2) }
command OpenModMenuConfirmWnd() { OpenFlagWnd(wnd_ModMenuConfirm, flg_ModMenuConfirmWnd) }
command OpenKeyItemWnd() { OpenFlagWnd(wnd_KeyItems, flg_KeyItemsWnd) }
command OpenItemWnd() { OpenFlagWnd(wnd_Item, flg_ItemWnd) }
command OpenDebugWnd() { OpenFlagWnd(wnd_ModMenuDebug, flg_ModMenuDebugWnd) }
command OpenKeyItemDescWnd() { OpenFlagWnd(wnd_KeyItemDescription, flg_KeyItemDescWnd) }

// Preset title commands for strings
command Lbl(text)  { "[18 0C 00 {byte[0] text} {byte[1] text} {byte[2] text} 00]" clearline }
command PtyLbl(partyMemberID) { "[18 0B 00 {byte[0] partyMemberID} 05]" clearline }

// Show debug info if Debug flag is on,
// then switch back to active window
command DebugWnd(prevWndType, string) 
{
	if flg_Debug 
	{
		window_open(wnd_ModMenuDebug)
		LoadRAM()
		Lbl(lbl_Debug)
		"{string}" newline
		"@Argument: {number(argument)}" newline
		LoadRAM()
		ctoarg
		"@Counter: {number(argument)}" newline
		LoadRAM()
		rtoarg
		"@Result: {number(argument)}"
		window_switch(prevWndType)
		LoadRAM()
	}
}

// Temporary window showing confirmation of action
// waits about a second, then closes and returns to previous window
command SystemWnd(prevWndType, string) 
{
	window_open(wnd_ModMenuNotification)
	LoadRAM()
	LoadCounter()
	Lbl(lbl_System)
	"{string}"
	"|||"
	SaveRAM()
	window_close(wnd_ModMenuNotification)
	window_switch(prevWndType)
	LoadRAM()
	LoadCounter()
}

// (Re)open/focus window
command Wnd(wndType) 
{
	LoadCounter()
	SaveRAM()
	window_close(wndType)
	window_open(wndType) 
	LoadRAM()
}

// Redraw screen using giant window
command RefreshScreen(prevWndType)
{ 
	Wnd(wnd_FullScreen)
	SaveRAM()
	window_close(wnd_FullScreen)
	window_switch(prevWndType)
	LoadRAM()
}

// Prompts user to enter a number, saves to argument register, then calls procedure if Yes
command ConfirmNumber(wndLabel, digits, string, yesLabel)
{
	CloseModMenuConfirmWnd()
	OpenModMenuConfirmWnd()
	Lbl(wndLabel)
	input(digits)
	rtoarg
	SaveRAM()
	" " newline
	"@{string}" newline
	" {number(argument)}" newline
	menu 2
	{
		"Yes": { LoadRAM() call(yesLabel) }
		default "No": { }
	}
	CloseModMenuConfirmWnd()
}

// Asks the user something, then  go to procedure if Yes
command ConfirmYesNo(wndLabel, string, yesLabel)
{
	CloseModMenuConfirmWnd()
	OpenModMenuConfirmWnd()
	Lbl(wndLabel)
	"@{string}" newline
	menu 2
	{
		"Yes": { goto(yesLabel) }
		default "No": { }
	}
	CloseModMenuConfirmWnd()
}

// Set the selected party member to the name of the new window
command SetPartyLabel()
{
	if counter_is(pty_Ness)  { PtyLbl(pty_Ness) }
	else if counter_is(pty_Paula) { PtyLbl(pty_Paula) }
	else if counter_is(pty_Jeff)  { PtyLbl(pty_Jeff) }
	else if counter_is(pty_Poo)   { PtyLbl(pty_Poo) }
	else if counter_is(pty_Pokey) { Lbl(lbl_Pokey) }
	else if counter_is(pty_Picky) { Lbl(lbl_Picky) }
	else if counter_is(pty_King)  { PtyLbl(5) }
	else if counter_is(pty_Tony)  { Lbl(lbl_Tony) }
	else if counter_is(pty_BubbleMonkey) { Lbl(lbl_BubbleMonkey) }
	else if counter_is(pty_BrickRoad) { Lbl(lbl_BrickRoad) }
	else if counter_is(pty_FlyingMan) { Lbl(lbl_FlyingMan) }
	else if counter_is(pty_TeddyBear) { Lbl(lbl_TeddyBear) }
	else if counter_is(pty_PlushBear) { Lbl(lbl_PlushBear) }
	else { Lbl(lbl_Party) }
}