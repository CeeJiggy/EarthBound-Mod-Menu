//import asm65816
import "../asm/cc_text_speed.ccs"
import "../asm/bg_viewer.ccs"
/* Mod Menu */
import "enums/flags.ccs"
import "enums/labels.ccs"
import "enums/party.ccs"
import "enums/items.ccs"
import "enums/windows.ccs"
import "commands.ccs"

// Get Text Speed
command GetTextSpeed() { gettextspeed }
// Set Text Speed
command SetTextSpeed(num) { settextspeed(num) }
command SetTextSpeedInstant() { SaveRAM() counter_zero ctoarg SetTextSpeed(0) LoadRAM() }
// Show Battle BG
command ShowBattleBG(layerNumber, distortionNumber, letterBox) { show_battle_bg(layerNumber, distortionNumber, letterBox) }
// Hide Battle BG
command HideBattleBG() { hide_battle_bg() }
// Menu with variable options and description of selected items
// Credit: phoenixbound for designing script
command GotoIfFlag(flg, addr) "[06 {short flg} {long addr}]"
command SwitchGoto(n) "[09 {byte n}]"
command SwitchCase(addr) long addr
command MenuOptionWithCallback(text, callback) "[19 02 {text} 01 {long callback}]"
command DisplayVertical(n) "[1C 0C {byte n}]"
command SetDescription(countNo, prevWndType, DescLabel) { SetTextSpeedInstant() counter(countNo) ctoarg call(DescLabel) window_switch(prevWndType) SetTextSpeed(1) eob }

// Save current count/arg/result registers to RAM
command SaveRAM() { "[1B 05]" }
// Retreive count/arg/result registers from RAM
command LoadRAM() { "[1B 06]" }
// Load count value into arg for use as a parameter
command LoadCounter() { ctoarg }
// Reset counter to zero
command ResetCounter() { counter_zero }

// Check if a certain party member is in the party
command get_char_at_pos(pos) { "[19 10 {byte pos}]" }
command compare_register(num, reg) { "[18 07 {long num} {byte reg}]" }
command compare_result(num)   { compare_register(num, 0) }
command compare_argument(num) { compare_register(num, 1) }
command compare_counter(num)  { compare_register(num, 2) }
command party_size_smaller_than(n) { "[1D 19 {byte n}]" }

command CheckIfCharacterInParty(charaID) 
{
    counter(1)
_loop:
    ctoarg
    get_char_at_pos(argument)
    if result_is(charaID) 
	{
		// Return result = 1
        goto(_loopend)
    }
    inc
    // Make sure we only check up to 6 party members lots
    if compare_counter(7) { // Is counter >= 7?
		party_size_smaller_than(1) // Set result to 0
        goto(_loopend)
    }
    goto(_loop)
	_loopend:
}

command SetFlagIfCharacterInParty(charaID, flgID) 
{
    counter(1)
_loop:
    ctoarg
    get_char_at_pos(argument)
    if result_is(charaID) 
	{
		set(flgID)
        goto(_loopend)
    }
    inc
    // Make sure we only check up to 6 party members lots
    if compare_counter(7) { // Is counter >= 7?
		unset(flgID)
		goto(_loopend)
    }
    goto(_loop)
	_loopend:
}

// Remove all members from party except one specified party leader 
// (without updating flags so they can be restored later)
command TempSoloPartyMember(ptyID) 
{
	party_add(ptyID)
	counter(1)
	_loop2:
		if counter_is(18) { goto(_loop2end) }
		else if not counter_is(ptyID) { ctoarg party_remove(argument) }
		inc
	goto(_loop2)
	RefreshScreenNoRegisters()
	_loop2end:
}

command RestorePartyFromFlags()
{
	store_registers
	if flag flg_Ness  { party_add(pty_Ness)  } if flag flg_Paula { party_add(pty_Paula) } 
	if flag flg_Jeff  { party_add(pty_Jeff)  } if flag flg_Poo   { party_add(pty_Poo)   } 
	if flag flg_Pokey { party_add(pty_Pokey) } if flag flg_Picky { party_add(pty_Picky) } 
	if flag flg_King  { party_add(pty_King)  } if flag flg_Tony  { party_add(pty_Tony)  } 
	if flag flg_BubbleMonkey { party_add(pty_BubbleMonkey) } 
	if flag flg_BrickRoad    { party_add(pty_BrickRoad) } 
	if flag flg_FlyingMan  { party_add(pty_FlyingMan) } 
	if flag flg_TeddyBear  { party_add(pty_TeddyBear) } 
	if flag flg_PlushBear  { party_add(pty_PlushBear) }
	
	if not flag flg_Ness  { party_remove(pty_Ness)  } if not flag flg_Paula { party_remove(pty_Paula) } 
	if not flag flg_Jeff  { party_remove(pty_Jeff)  } if not flag flg_Poo   { party_remove(pty_Poo)   } 
	if not flag flg_Pokey { party_remove(pty_Pokey) } if not flag flg_Picky { party_remove(pty_Picky) } 
	if not flag flg_King  { party_remove(pty_King)  } if not flag flg_Tony  { party_remove(pty_Tony)  } 
	if not flag flg_BubbleMonkey { party_remove(pty_BubbleMonkey) } 
	if not flag flg_BrickRoad    { party_remove(pty_BrickRoad) } 
	if not flag flg_FlyingMan  { party_remove(pty_FlyingMan) } 
	if not flag flg_TeddyBear  { party_remove(pty_TeddyBear) } 
	if not flag flg_PlushBear  { party_remove(pty_PlushBear) }
	RefreshScreenNoRegisters()
	load_registers
}

command SetFlagByResult(flgID) 
{
	store_registers
	if result_is(1) { set(flgID) } 
	load_registers
	if result_is(0) { unset(flgID) }
}

command SetPartyFlags()
{
	CheckIfCharacterInParty(pty_Ness)  SetFlagByResult(flg_Ness)
	CheckIfCharacterInParty(pty_Paula) SetFlagByResult(flg_Paula)
	CheckIfCharacterInParty(pty_Jeff)  SetFlagByResult(flg_Jeff)
	CheckIfCharacterInParty(pty_Poo)   SetFlagByResult(flg_Poo)
	CheckIfCharacterInParty(pty_Pokey) SetFlagByResult(flg_Pokey)
	CheckIfCharacterInParty(pty_Picky) SetFlagByResult(flg_Picky)
	CheckIfCharacterInParty(pty_King)  SetFlagByResult(flg_King)
	CheckIfCharacterInParty(pty_Tony)  SetFlagByResult(flg_Tony)
	CheckIfCharacterInParty(pty_BubbleMonkey) SetFlagByResult(flg_BubbleMonkey)
	CheckIfCharacterInParty(pty_BrickRoad) SetFlagByResult(flg_BrickRoad)
	CheckIfCharacterInParty(pty_FlyingMan) SetFlagByResult(flg_FlyingMan)
	CheckIfCharacterInParty(pty_TeddyBear) SetFlagByResult(flg_TeddyBear)
	CheckIfCharacterInParty(pty_PlushBear) SetFlagByResult(flg_PlushBear)
}

// Turn active flag off or vice versa
command ToggleFlag(flagID) { 
	ToggleWithSound(flagID) 
	if (flagID) { SystemWnd(wnd_ModMenu2, "@Flag is now ON.") } 
	else { SystemWnd(wnd_ModMenu2, "@Flag is now OFF.") } 
}
command ToggleWithSound(flgID) { toggle(flgID) if flag flgID { sound(SND_GIFTOPEN) } else { sound(SND_BOXTAKE) } }

// Closes a window if a flag is set that says it's open (to prevent crashing from attempting to close unopened windows)
command CloseFlagWnd(wnd, flg) { LoadCounter() SaveRAM() if flg { window_close(wnd) unset(flg) } }
// Hide unnecessary windows that may be open
command CloseModMenuWnd() { CloseFlagWnd(wnd_ModMenu, flg_ModMenuWnd) } // main mod menu window to the left
command CloseModMenu2Wnd() { CloseFlagWnd(wnd_ModMenu2, flg_ModMenuWnd2) } // smaller mod menu window to the right
command CloseModMenuConfirmWnd() { CloseFlagWnd(wnd_ModMenuConfirm, flg_ModMenuConfirmWnd) } // confirmation of choice window
command CloseKeyItemWnd() { CloseFlagWnd(wnd_KeyItems, flg_KeyItemsWnd) } // duplicate goods window only for key items
command CloseItemWnd() { CloseFlagWnd(wnd_Item, flg_ItemWnd) } // action menu for use, help etc.
command CloseDebugWnd() { CloseFlagWnd(wnd_ModMenuDebug, flg_ModMenuDebugWnd) } // debug print window
command CloseKeyItemDescWnd() { CloseFlagWnd(wnd_KeyItemDescription, flg_KeyItemDescWnd) } // window below key items window for description
// Hide all possible Mod Menu windows that may be open
command CloseAllModMenuWnd() { CloseModMenuWnd() CloseModMenu2Wnd() CloseModMenuConfirmWnd() CloseKeyItemWnd() CloseItemWnd() CloseDebugWnd() CloseKeyItemDescWnd() }

// Open Mod Menu window and set flag that it's open
command OpenFlagWnd(wnd, flg) { window_open(wnd) LoadRAM() LoadCounter() set(flg) }

command OpenModMenuWnd() { OpenFlagWnd(wnd_ModMenu, flg_ModMenuWnd) }
command OpenModMenu2Wnd() { OpenFlagWnd(wnd_ModMenu2, flg_ModMenuWnd2) }
command OpenModMenuConfirmWnd() { OpenFlagWnd(wnd_ModMenuConfirm, flg_ModMenuConfirmWnd) }
command OpenKeyItemWnd() { OpenFlagWnd(wnd_KeyItems, flg_KeyItemsWnd) }
command OpenItemWnd() { OpenFlagWnd(wnd_Item, flg_ItemWnd) }
command OpenDebugWnd() { OpenFlagWnd(wnd_ModMenuDebug, flg_ModMenuDebugWnd) }
command OpenKeyItemDescWnd() { OpenFlagWnd(wnd_KeyItemDescription, flg_KeyItemDescWnd) }

// Preset title commands for strings
command Lbl(text)  { "[18 0C 00 {byte[0] text} {byte[1] text} {byte[2] text} 00]" clearline }
command PtyLbl(partyMemberID) { "[18 0B 00 {byte[0] partyMemberID} 05]" clearline }

// Show debug info if Debug flag is on,
// then switch back to active window
command DebugWnd(prevWndType, string) 
{
	if flg_Debug 
	{
		SetTextSpeedInstant()
		window_open(wnd_ModMenuDebug)
		LoadRAM()
		Lbl(lbl_Debug)
		"{string}" newline
		"@Argument: {number(argument)}" newline
		LoadRAM()
		ctoarg
		"@Counter: {number(argument)}" newline
		LoadRAM()
		rtoarg
		"@Result: {number(argument)}"
		window_switch(prevWndType)
		LoadRAM()
		SetTextSpeed(1)
	}
}

// Temporary window showing confirmation of action
// waits about a second, then closes and returns to previous window
command SystemWnd(prevWndType, string) 
{
	window_open(wnd_ModMenuNotification)
	SetTextSpeedInstant()
	LoadRAM()
	LoadCounter()
	Lbl(lbl_System)
	"{string}"
	SetTextSpeed(1)
	"|||"
	SaveRAM()
	window_close(wnd_ModMenuNotification)
	window_switch(prevWndType)
	LoadRAM()
	LoadCounter()
}

// (Re)open/focus window
command Wnd(wndType) 
{
	LoadCounter()
	SaveRAM()
	window_close(wndType)
	window_open(wndType) 
	LoadRAM()
}

// Redraw screen using giant window
command RefreshScreen(prevWndType)
{ 
	Wnd(wnd_FullScreen)
	SaveRAM()
	window_close(wnd_FullScreen)
	window_switch(prevWndType)
	LoadRAM()
}

command RefreshScreenNoRegisters()
{ 
	window_open(wnd_FullScreen)
	window_close(wnd_FullScreen)
}

// Prompts user to enter a number, saves to argument register, then calls procedure if Yes
command ConfirmNumber(wndLabel, digits, string, yesLabel)
{
	CloseModMenuConfirmWnd()
	OpenModMenuConfirmWnd()
	SetTextSpeedInstant()
	Lbl(wndLabel)
	input(digits)
	rtoarg
	SaveRAM()
	" " newline
	"@{string}" newline
	" {number(argument)}" newline
	menu 2
	{
		"Yes": { LoadRAM() call(yesLabel) }
		default "No": { }
	}
	CloseModMenuConfirmWnd()
	SetTextSpeed(1)
}

// Asks the user something, then  go to procedure if Yes
command ConfirmYesNo(wndLabel, string, yesLabel)
{
	CloseModMenuConfirmWnd()
	OpenModMenuConfirmWnd()
	Lbl(wndLabel)
	SetTextSpeedInstant()
	"@{string}" newline
	menu 2
	{
		"Yes": { goto(yesLabel) }
		default "No": { }
	}
	CloseModMenuConfirmWnd()
	SetTextSpeed(1)
}

// Set the selected party member to the name of the new window
command SetPartyLabel()
{
	if counter_is(pty_Ness)  { PtyLbl(pty_Ness) }
	else if counter_is(pty_Paula) { PtyLbl(pty_Paula) }
	else if counter_is(pty_Jeff)  { PtyLbl(pty_Jeff) }
	else if counter_is(pty_Poo)   { PtyLbl(pty_Poo) }
	else if counter_is(pty_Pokey) { Lbl(lbl_Pokey) }
	else if counter_is(pty_Picky) { Lbl(lbl_Picky) }
	else if counter_is(pty_King)  { PtyLbl(pty_King) }
	else if counter_is(pty_Tony)  { Lbl(lbl_Tony) }
	else if counter_is(pty_BubbleMonkey) { Lbl(lbl_BubbleMonkey) }
	else if counter_is(pty_BrickRoad) { Lbl(lbl_BrickRoad) }
	else if counter_is(pty_FlyingMan) { Lbl(lbl_FlyingMan) }
	else if counter_is(pty_TeddyBear) { Lbl(lbl_TeddyBear) }
	else if counter_is(pty_PlushBear) { Lbl(lbl_PlushBear) }
	else { Lbl(lbl_Party) }
}

// Give Item in argument register to party
command GiveItem(charaID) {
	SaveRAM()
	window_open(wnd_Dialog)
	sound(SND_BOXTAKE)
	LoadRAM()
	"[1D 0E {byte charaID} 00]"
	call(0xc7dcda) next
	window_close(wnd_Dialog)
}

command GiveKeyItem(charaID) {
	SaveRAM()
	window_open(wnd_Dialog)
	sound(SND_SPECIALITEM)
	LoadRAM()
	"[1D 0E {byte charaID} 00]" 
	call(0xc7dcda) next
	window_close(wnd_Dialog)
}

command GiveItemToParty(itemID)
{
	SaveRAM()
	arg(itemID)
	if not full(0xFF)
	{
		if not full(1) { GiveItem(1) }
		else if not full(2) { GiveItem(2) }
		else if not full(3) { GiveItem(3) }
		else if not full(4) { GiveItem(4) }
	}
	else
	{
		NotifyInventoryFull()
	}
}

command GiveKeyItemToParty(itemID)
{
	if not flag flg_KeyItems
	{
		SaveRAM()
		arg(itemID)
		if not full(0xFF)
		{
			if not full(1) { GiveKeyItem(1) }
			else if not full(2) { GiveKeyItem(2) }
			else if not full(3) { GiveKeyItem(3) }
			else if not full(4) { GiveKeyItem(4) }
		}
		else
		{
			NotifyInventoryFull()
		}
	}
	else
	{
		counter(itemID)
		if counter_is(item_Sound_Stone) { ToggleFlag(flg_BuzzBuzzDead) }
		if counter_is(item_Key_Shack) { ToggleFlag(flg_KeyItem_ShackKey) }
		if counter_is(item_Bicycle) { ToggleFlag(flg_KeyItem_Bicycle) }
		if counter_is(item_Town_Map) { ToggleFlag(flg_KeyItem_TownMap) }
		if counter_is(item_Receiver_Phone) { ToggleFlag(flg_KeyItem_ReceiverPhone) }
		if counter_is(item_Eraser_Pencil) { ToggleFlag(flg_KeyItem_PencilEraser) }
		if counter_is(item_Key_Cabin) { ToggleFlag(flg_KeyItem_CabinKey) }
		if counter_is(item_Wad_Bills) { ToggleFlag(flg_KeyItem_WadofBills) }
		if counter_is(item_Zombie_Paper) { ToggleFlag(flg_KeyItem_ZombiePaper) }
		if counter_is(item_Bad_Key_Machine) { ToggleFlag(flg_KeyItem_BadKeyMachine) }
		if counter_is(item_Eraser_Eraser) { ToggleFlag(flg_KeyItem_EraserEraser) }
		if counter_is(item_Diamond) { ToggleFlag(flg_KeyItem_Diamond) }
		if counter_is(item_Signed_Banana) { ToggleFlag(flg_KeyItem_SignedBanana) }
		if counter_is(item_Hieroglyph_Copy) { ToggleFlag(flg_KeyItem_HieroglyphCopy) }
		if counter_is(item_Key_Carrot) { ToggleFlag(flg_KeyItem_CarrotKey) }
		if counter_is(item_Key_Tower) { ToggleFlag(flg_KeyItem_DungeonManKey) }
		if counter_is(item_Hawk_Eye) { ToggleFlag(flg_KeyItem_HawkEye) }
		if counter_is(item_Shyness_Book) { ToggleFlag(flg_KeyItem_ShynessBook) }
		if counter_is(item_Tendakraut) { ToggleFlag(flg_KeyItem_Tendakraut) }
		if counter_is(item_Meteorite_Piece) { ToggleFlag(flg_KeyItem_Meteorite) }
		if counter_is(item_Bubble_Gum) { ToggleFlag(flg_KeyItem_BubbleGum) }
		if counter_is(item_Pass_Backstage) { ToggleFlag(flg_KeyItem_BackstagePass) }
		if counter_is(item_Yogurt_Dispenser) { ToggleFlag(flg_KeyItem_YogurtMachine) }
		if counter_is(item_Show_Ticket) { ToggleFlag(flg_KeyItem_ShowTicket) }
	}
}

command NotifyInventoryFull()
{
	SystemWnd(wnd_ModMenu2, "There's no room for new items.")
}

/* Sprites */
command CreateSprite(sprite,move,style) "[1F 15 {short sprite} {short move} {byte style}]"