//import asm65816
import "../asm/general.ccs"

/* Mod Menu */
import "enums/flags.ccs"
import "enums/labels.ccs"
import "enums/party.ccs"
import "enums/windows.ccs"
import "commands.ccs"

/*
 * Window Commands
 */

// Save current count/arg/result registers to RAM
command SaveRAM() { act_to_wram }
// Retreive count/arg/result registers from RAM
command LoadRAM() { wram_to_act }
// Load count value into arg for use as a parameter
command LoadCounter() { ctoarg }
// Reset counter to zero
command ResetCounter() { counter_zero }

// Hide unnecessary windows that may be open (using flag, without crashing the game)
command CloseModMenuWnd() { LoadCounter() SaveRAM() if flg_ModMenuWnd { window_close(wnd_ModMenu) unset(flg_ModMenuWnd) } }
command CloseModMenu2Wnd() { LoadCounter() SaveRAM() if flg_ModMenuWnd2 { window_close(wnd_ModMenu2) unset(flg_ModMenuWnd2) } }
command CloseModMenuConfirmWnd() { LoadCounter() SaveRAM() if flg_ModMenuConfirmWnd { window_close(wnd_ModMenuConfirm) unset(flg_ModMenuConfirmWnd) } }

command CloseAllModMenuWnd() { CloseModMenuWnd() CloseModMenu2Wnd() CloseModMenuConfirmWnd() }

// Open Mod Menu window and set flag that it's open
command OpenModMenuWnd() { window_open(wnd_ModMenu) LoadRAM() LoadCounter() set(flg_ModMenuWnd) }
command OpenModMenu2Wnd() { window_open(wnd_ModMenu2) LoadRAM() LoadCounter() set(flg_ModMenuWnd2) }
command OpenModMenuConfirmWnd() { window_open(wnd_ModMenuConfirm) LoadRAM() LoadCounter() set(flg_ModMenuConfirmWnd) }

// Preset title commands for strings
command Lbl(label)  { "[18 0C 00 {byte[0] label} {byte[1] label} {byte[2] label} 00]" clearline }
command PtyLbl(partyMemberID) { "[18 0B 00 {byte[0] partyMemberID} 05]" clearline }

// Show debug info if Debug flag is on,
// then switch back to active window
command DebugWnd(prevWndType, string) 
{
	if flg_Debug 
	{
		window_open(wnd_ModMenuDebug)
		LoadRAM()
		LoadCounter()
		Lbl(lbl_Debug)
		"{string}" newline
		"" newline
		"@Current Registers" newline
		"@Name: {name(argument)}" newline
		"@Number: {number(argument)}" next
		SaveRAM()
		window_switch(prevWndType)
		LoadRAM()
		LoadCounter()
	}
}

// Temporary window showing confirmation of action
// waits about a second, then closes and returns to previous window
command SystemWnd(prevWndType, string) 
{
	window_open(wnd_ModMenuNotification)
	LoadRAM()
	LoadCounter()
	Lbl(lbl_System)
	"{string}"
	"|||"
	SaveRAM()
	window_close(wnd_ModMenuNotification)
	window_switch(prevWndType)
	LoadRAM()
	LoadCounter()
}

// (Re)open/focus window
command Wnd(wndType) 
{
	LoadCounter()
	SaveRAM()
	window_close(wndType)
	window_open(wndType) 
	LoadRAM()
}

// Redraw screen using giant window
command RefreshScreen(prevWndType)
{ 
	Wnd(wnd_FullScreen)
	SaveRAM()
	window_close(wnd_FullScreen)
	window_switch(prevWndType)
	LoadRAM()
}

/*
 * Flag Commands
 */

// Enable/disable looping current section of menu
command StartLoop() { set(flg_Loop) }
command EndLoop() { unset(flg_Loop) }

/*
 * Mod Menu Commands
 */

// Set the selected party member to the name of the new window
command SetPartyLabel()
{
	if counter_is(pty_Ness)  { PtyLbl(pty_Ness) }
	else if counter_is(pty_Paula) { PtyLbl(pty_Paula) }
	else if counter_is(pty_Jeff)  { PtyLbl(pty_Jeff) }
	else if counter_is(pty_Poo)   { PtyLbl(pty_Poo) }
	else if counter_is(pty_Pokey) { Lbl(lbl_Pokey) }
	else if counter_is(pty_Picky) { Lbl(lbl_Picky) }
	else if counter_is(pty_King)  { PtyLbl(5) }
	else if counter_is(pty_Tony)  { Lbl(lbl_Tony) }
	else if counter_is(pty_BubbleMonkey) { Lbl(lbl_BubbleMonkey) }
	else if counter_is(pty_BrickRoad) { Lbl(lbl_BrickRoad) }
	else if counter_is(pty_FlyingMan) { Lbl(lbl_FlyingMan) }
	else if counter_is(pty_TeddyBear) { Lbl(lbl_TeddyBear) }
	else if counter_is(pty_PlushBear) { Lbl(lbl_PlushBear) }
	else { Lbl(lbl_Party) }
}