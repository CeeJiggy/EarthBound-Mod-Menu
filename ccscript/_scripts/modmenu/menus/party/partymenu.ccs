/* Mod Menu */
import "../../enums/flags.ccs"
import "../../enums/labels.ccs"
import "../../enums/party.ccs"
import "../../enums/windows.ccs"
import "../../enums/counter.ccs"
import "../../commands.ccs"
import "../modmenu.ccs"
/* Submenu */
import "health/healthmenu.ccs"

PartyMenu: 
{
	// Open main Mod Menu 2 Window
	OpenModMenu2Wnd()
	// Clear party editing flags
	Lbl(lbl_Party)
	ResetCounter() ctoarg
	// Pick a menu option
	MenuOptionWithCallback("All", Set_Count_0)
	MenuOptionWithCallback("Ness", Set_Count_1)
	MenuOptionWithCallback("Paula", Set_Count_2)
	MenuOptionWithCallback("Jeff", Set_Count_3)
	MenuOptionWithCallback("Poo", Set_Count_4)
	MenuOptionWithCallback("NPCs", Set_Count_5)
	DisplayVertical(1) if not "[11]" { goto(ModMenu) }
	ctoarg swap
	SwitchGoto(6)
		SwitchCase(end_partymenu)
		SwitchCase(end_partymenu)
		SwitchCase(end_partymenu)
		SwitchCase(end_partymenu)
		SwitchCase(end_partymenu)
		SwitchCase(end_partymenu)
	end_partymenu:
		goto(PartyEditMenu)
}

PartyEditMenu:
{
	// Open main Mod Menu 2 Window
	OpenModMenu2Wnd()
	SaveRAM()
	swap
	SetPartyLabel()
	LoadRAM()
	if not counter_is_greaterthan_orequal(4)
	{
		MenuOptionWithCallback("Health", Set_Count_1)
		MenuOptionWithCallback("Stats", Set_Count_2)
	}
	LoadRAM()
	if result_is(0)
	{
		MenuOptionWithCallback("Add All", Set_Count_3)
		MenuOptionWithCallback("Remove All", Set_Count_4)
	}
	LoadRAM()
	if result_not(0)
	{
		MenuOptionWithCallback("Add", Set_Count_5)
		MenuOptionWithCallback("Remove", Set_Count_6)
	}
	ResetCounter() ctoarg
	DisplayVertical(1) if not "[11]" { goto(PartyMenu) }
	ctoarg swap
	SwitchGoto(6)
		SwitchCase(chose_health)
		SwitchCase(chose_stats)
		SwitchCase(chose_add_all)
		SwitchCase(chose_remove_all)
		SwitchCase(chose_add)
		SwitchCase(chose_remove)
	swap
	chose_add_all:
		party_add(pty_Ness)
		party_add(pty_Paula)
		party_add(pty_Jeff)
		party_add(pty_Poo)
		SetPartyFlags()
		RefreshScreen(wnd_ModMenu2)
		SystemWnd(wnd_ModMenu2, "{music(0x7B)}@Everyone joined the party.{pause(90)}{music_resume}")
		goto(end_partyeditmenu)
	chose_remove_all:
		get_char_at_pos(1)
		store_registers
		if result_is(pty_Ness) { TempSoloPartyMember(pty_Ness) }
		load_registers
		if result_is(pty_Paula) { TempSoloPartyMember(pty_Paula) }
		load_registers
		if result_is(pty_Jeff) { TempSoloPartyMember(pty_Jeff) }
		load_registers
		if result_is(pty_Poo) { TempSoloPartyMember(pty_Poo) }
		RefreshScreen(wnd_ModMenu2)
		SystemWnd(wnd_ModMenu2, "{sound(SND_STATUSCHANGE)}@Everyone left the party.")
		SetPartyFlags()
		goto(end_partyeditmenu)
	chose_health:
		LoadRAM() goto(HealthMenu)
	chose_stats:
		LoadRAM() goto(StatsMenu)
	chose_add:
		AddToParty()
		goto(end_partyeditmenu)
	chose_remove:
		RemoveFromParty()
		goto(end_partyeditmenu)
	end_partyeditmenu:
		LoadRAM()
		goto(PartyEditMenu)
}

PartyMenu_Followers:
	ResetCounter()
	CloseModMenu2Wnd()
	OpenModMenuWnd()
	Lbl(lbl_Party)
	menu 1 {
		"Pokey": { counter(pty_Pokey) goto(FollowersMenu) }
		"Picky": { counter(pty_Picky) goto(FollowersMenu) }
		"King":  { counter(pty_King) goto(FollowersMenu) }
		"Tony":  { counter(pty_Tony) goto(FollowersMenu) }
		"Bubble Monkey": { counter(pty_BubbleMonkey) goto(FollowersMenu) }
		"Dungeon Man":   { counter(pty_BrickRoad) goto(FollowersMenu) }
		"Flying Man":    { counter(pty_FlyingMan) goto(FollowersMenu) }
		"Teddy Bear":    { counter(pty_TeddyBear) goto(FollowersMenu) }
		"Plush Bear": { counter(pty_PlushBear) goto(FollowersMenu) }
		default "Back": { goto(PartyMenu) }
		}
goto(PartyMenu_Followers)


command AddToParty() 
{
	SaveRAM()
	// Prevent adding more than 2 followers, which causes graphical glitches
	if not counter_is(1) and not counter_is(2) and not counter_is(3) and not counter_is(4)
	{
		if party_size_smaller_than(4) 
		{
			if party_size_smaller_than(3)
			{
				if party_size_smaller_than(2)
				{
					// 1
					get_char_at_pos(2) if not result_is(0) { get_char_at_pos(3) if not result_is(0) { SystemWnd(wnd_ModMenu2, "@There are too many followers.") goto(PartyMenu)  } }
				}
				else // 2
				{
					get_char_at_pos(3) if not result_is(0) { get_char_at_pos(4) if not result_is(0) { SystemWnd(wnd_ModMenu2, "@There are too many followers.") goto(PartyMenu)  } }
				}
			}
			else // 3
			{
				get_char_at_pos(4) if not result_is(0) { get_char_at_pos(5) if not result_is(0) { SystemWnd(wnd_ModMenu2, "@There are too many followers.") goto(PartyMenu)  } }
			}
		}
		else // 4
		{
			get_char_at_pos(5) if not result_is(0) { get_char_at_pos(6) if not result_is(0) { SystemWnd(wnd_ModMenu2, "@There are too many followers.") goto(PartyMenu)  } }
		}
	}
	LoadRAM()
	LoadCounter()
	party_add(argument)
	RefreshScreen(wnd_ModMenu2)
	LoadRAM()
	SystemWnd(wnd_ModMenu2, "{music(0x7B)}@{name(argument)} joined the party.{pause(90)}{music_resume}.") 
	SetPartyFlags()
	goto(PartyMenu)
}

command RemoveFromParty() 
{
	// Check if you can remove from party without causing death loop
	SaveRAM()
	if counter_is(1) or counter_is(2) or counter_is(3) or counter_is(4)
	{
		party_size_smaller_than(2) if result_is(1) { SystemWnd(wnd_ModMenu, "@Couldn't remove {name(argument)} from party.") }
		else {
			goto(_remove)
		}
	}
	else
	{
		goto(_remove)
	}
	goto(_remove_end)
	_remove:
		LoadRAM()
		LoadCounter()
		party_remove(argument)
		RefreshScreen(wnd_ModMenu2) 
		SystemWnd(wnd_ModMenu2, "{sound(SND_STATUSCHANGE)}@{name(argument)} left the party.")
		SetPartyFlags()
	_remove_end:
}


PartyMenu_All:
	CloseModMenu2Wnd()
	OpenModMenu2Wnd()
	Lbl(lbl_Party)
	menu 1 {
		"Health": { goto(HealthMenu) }
		"Stats":  { goto(StatsMenu) }
		//"PSI":    { goto(PSIMenu) }
		"Add":    
		{ 
			
		}
		"Remove":
		{
			
		}
		default "Back": { goto(PartyMenu) 
		}
	}
goto(PartyMenu)

PartyMenu_Main4:
	CloseModMenu2Wnd()
	OpenModMenu2Wnd()
	SetPartyLabel()
	menu 1 {
		"Health": { goto(HealthMenu) }
		"Stats":  { goto(StatsMenu) }
		//"PSI":    { goto(PSIMenu) }
		"Add":    { AddToParty() }
		"Remove": { RemoveFromParty() }
		 default "Back": { goto(PartyMenu) }
	}
goto(PartyMenu_Main4)

FollowersMenu:
	CloseModMenu2Wnd()
	OpenModMenu2Wnd()
	SetPartyLabel()
	menu 1 
	{
		"Add":    { AddToParty() }
		"Remove": { RemoveFromParty() }
		 default "Back": { goto(PartyMenu) }
	}
goto(FollowersMenu)

StatsMenu:
	OpenModMenu2Wnd()
	Lbl(lbl_Status)
	menu 1 {
		"Set Level": { ConfirmNumber(lbl_Level, 3, "Set to this Level?", SetLevel) }
		"Boost EXP": { ConfirmNumber(lbl_EXP, 5, "Increase EXP by this?", BoostEXP) }
		"Boost IQ": { ConfirmNumber(lbl_IQ, 3, "Increase IQ by this?", BoostIQ) }
		"Boost Guts": { ConfirmNumber(lbl_Guts, 3, "Increase Guts by this?", BoostGuts) }
		"Boost Speed": { ConfirmNumber(lbl_Speed, 3, "Increase Speed by this?", BoostSpeed) }
		"Boost Vitality": { ConfirmNumber(lbl_Vitality, 3, "Inc. vitality by this?", BoostVitality) }
		"Boost Luck": { ConfirmNumber(lbl_Luck, 3, "Increase Luck by this?", BoostLuck) }
		 default "Back": { goto(PartyMenu) }
	}
goto(StatsMenu)

command SetStatNotification(partyName, statName, amount) { SystemWnd(wnd_ModMenu2, "{sound(SND_STATSUP)}@Set {partyName)}'s {statName} to {amount}.") }
command IncStatNotification(partyName, statName, amount) { SystemWnd(wnd_ModMenu2, "{sound(SND_STATSUP)}@{partyName)}'s {statName} went up by {amount}.") }

SetLevel:
if counter_is(pty_Ness) { change_level(pty_Ness, argument) SetStatNotification(name(pty_Ness), "Level", number(argument)) } 
else if counter_is(pty_Paula) { change_level(pty_Paula, argument) SetStatNotification(name(pty_Paula), "Level", number(argument)) }
else if counter_is(pty_Jeff)  { change_level(pty_Jeff, argument) SetStatNotification(name(pty_Jeff), "Level", number(argument))  } 
else if counter_is(pty_Poo)   { change_level(pty_Poo, argument) SetStatNotification(name(pty_Poo), "Level", number(argument))   }
else if counter_is(0)
{
	change_level(pty_Ness, argument) change_level(pty_Paula, argument)
	change_level(pty_Jeff, argument) change_level(pty_Poo, argument)
	SetStatNotification("everyone", "Level", number(argument))
}
eob

command boost_exp_fixed(char, n) { "[1E 09 {byte char} {long n}]{linebreak}{newline}" }

BoostEXP:
	if counter_is(pty_Ness) { boost_exp_fixed(pty_Ness, argument) IncStatNotification(name(pty_Ness), "EXP", number(argument)) } 
	else if counter_is(pty_Paula) { boost_exp_fixed(pty_Paula, argument) IncStatNotification(name(pty_Paula), "EXP", number(argument)) }
	else if counter_is(pty_Jeff)  { boost_exp_fixed(pty_Jeff, argument) IncStatNotification(name(pty_Jeff), "EXP", number(argument))  } 
	else if counter_is(pty_Poo)   { boost_exp_fixed(pty_Poo, argument) IncStatNotification(name(pty_Poo), "EXP", number(argument))   }
	else if counter_is(0)
	{
		boost_exp_fixed(pty_Ness, argument) boost_exp_fixed(pty_Paula, argument)
		boost_exp_fixed(pty_Jeff, argument) boost_exp_fixed(pty_Poo, argument)
		IncStatNotification("everyone", "EXP", number(argument))
	}
eob

BoostIQ:
	if counter_is(pty_Ness) { boost_iq(pty_Ness, argument) IncStatNotification(name(pty_Ness), "IQ", number(argument)) } 
	else if counter_is(pty_Paula) { boost_iq(pty_Paula, argument) IncStatNotification(name(pty_Paula), "IQ", number(argument)) }
	else if counter_is(pty_Jeff)  { boost_iq(pty_Jeff, argument) IncStatNotification(name(pty_Jeff), "IQ", number(argument))  } 
	else if counter_is(pty_Poo)   { boost_iq(pty_Poo, argument) IncStatNotification(name(pty_Poo), "IQ", number(argument))   }
	else if counter_is(0)
	{
		boost_iq(pty_Ness, argument) boost_iq(pty_Paula, argument)
		boost_iq(pty_Jeff, argument) boost_iq(pty_Poo, argument)
		IncStatNotification("everyone", "IQ", number(argument))
	}
eob

BoostGuts:
	if counter_is(pty_Ness) { boost_guts(pty_Ness, argument) IncStatNotification(name(pty_Ness), "Guts", number(argument)) } 
	else if counter_is(pty_Paula) { boost_guts(pty_Paula, argument) IncStatNotification(name(pty_Paula), "Guts", number(argument)) }
	else if counter_is(pty_Jeff)  { boost_guts(pty_Jeff, argument) IncStatNotification(name(pty_Jeff), "Guts", number(argument))  } 
	else if counter_is(pty_Poo)   { boost_guts(pty_Poo, argument) IncStatNotification(name(pty_Poo), "Guts", number(argument))   }
	else if counter_is(0)
	{
		boost_guts(pty_Ness, argument) boost_guts(pty_Paula, argument)
		boost_guts(pty_Jeff, argument) boost_guts(pty_Poo, argument)
		IncStatNotification("everyone", "Guts", number(argument))
	}
eob

BoostSpeed:
	if counter_is(pty_Ness) { boost_speed(pty_Ness, argument) IncStatNotification(name(pty_Ness), "Speed", number(argument)) } 
	else if counter_is(pty_Paula) { boost_speed(pty_Paula, argument) IncStatNotification(name(pty_Paula), "Speed", number(argument)) }
	else if counter_is(pty_Jeff)  { boost_speed(pty_Jeff, argument) IncStatNotification(name(pty_Jeff), "Speed", number(argument))  } 
	else if counter_is(pty_Poo)   { boost_speed(pty_Poo, argument) IncStatNotification(name(pty_Poo), "Speed", number(argument))   }
	else if counter_is(0)
	{
		boost_speed(pty_Ness, argument) boost_speed(pty_Paula, argument)
		boost_speed(pty_Jeff, argument) boost_speed(pty_Poo, argument)
		IncStatNotification("everyone", "Speed", number(argument))
	}
eob

BoostVitality:
	if counter_is(pty_Ness) { boost_vitality(pty_Ness, argument) IncStatNotification(name(pty_Ness), "Vitality", number(argument)) } 
	else if counter_is(pty_Paula) { boost_vitality(pty_Paula, argument) IncStatNotification(name(pty_Paula), "Vitality", number(argument)) }
	else if counter_is(pty_Jeff)  { boost_vitality(pty_Jeff, argument) IncStatNotification(name(pty_Jeff), "Vitality", number(argument))  } 
	else if counter_is(pty_Poo)   { boost_vitality(pty_Poo, argument) IncStatNotification(name(pty_Poo), "Vitality", number(argument))   }
	else if counter_is(0)
	{
		boost_vitality(pty_Ness, argument) boost_vitality(pty_Paula, argument)
		boost_vitality(pty_Jeff, argument) boost_vitality(pty_Poo, argument)
		IncStatNotification("everyone", "Vitality", number(argument))
	}
eob

BoostLuck:
	if counter_is(pty_Ness) { boost_luck(pty_Ness, argument) IncStatNotification(name(pty_Ness), "Luck", number(argument)) } 
	else if counter_is(pty_Paula) { boost_luck(pty_Paula, argument) IncStatNotification(name(pty_Paula), "Luck", number(argument)) }
	else if counter_is(pty_Jeff)  { boost_luck(pty_Jeff, argument) IncStatNotification(name(pty_Jeff), "Luck", number(argument))  } 
	else if counter_is(pty_Poo)   { boost_luck(pty_Poo, argument) IncStatNotification(name(pty_Poo), "Luck", number(argument))   }
	else if counter_is(0)
	{
		boost_luck(pty_Ness, argument) boost_luck(pty_Paula, argument)
		boost_luck(pty_Jeff, argument) boost_luck(pty_Poo, argument)
		IncStatNotification("everyone", "Luck", number(argument))
	}
eob