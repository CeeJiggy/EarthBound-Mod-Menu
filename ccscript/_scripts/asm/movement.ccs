// By Catador
// Original movement codes for PK Scramble at bottom of the file
// (it has to be the same file for linking reasons)

// If trying to translate stuff from ebsrc, here's their macros:
// https://github.com/Herringway/ebsrc/blob/master/src/eventmacros.asm

import asm65816_2

command ASMLoadAddress0A(Address) {
 LDA_i (short[0] Address)
 STA_d (0x0A)
 LDA_i (short[1] Address)
 STA_d (0x0C)
}

// These I borrowed from ebpp because they were missing from Catador's script
// They might not be the right ones
command mov_tablewrite(i, w) "[0E {byte i} {short w}]"
command mov_jslasm(target) "[42 {adr24(target)}]"
command mov_jslmov_short(target, fivebyte) "[4D {short target}{byte [2] target} {short fivebyte}]"


//CALLING SPRITES/MOVEMENT SCRIPTS
command create_obj(spr, scr, style)	"[1F 15 {short spr} {short scr} {byte style}]"
command create_tpt(spr, scr, style)		"[1F 17 {short spr} {short scr} {byte style}]"
command create_newmove(spr, scr)	"[1F F1 {short spr} {short scr}]"
command wait_movscr			"[1F 61]"

//Movement codes:

command mov_end           		"[00]"	// End movement script (think "eob")
command startloop(c)			"[01 {byte c}]"	// Start a loop with 'c' iterations
command endloop			"[02]"	// End a loop and go back to start of loop body if still haven't gone through all iterations
command mov_jml(addr)			"[03 {adr24(addr)}]"	// Analogous to ASM JML, but for movement scripts
command mov_jsl(addr)			"[04 {adr24(addr)}]"	// Analogous to ASM JSL, but for movement scripts
command mov_rtl			"[05]"	// Analogous to ASM RTL, but for movement scripts
command mov_wait(frames)		"[06 {byte frames}]"	// Wait 'frames' frames (think "`pause(frames)")
command task(addr)			"[07 {short addr}]"	// Register a background task, a movement script that runs alongside this movement script. Must be in the same bank as the current script
command ontick(addr)			"[08 {adr24(addr)}]"	// Register a "TICK callback", an ASM function that runs every frame for the object
command halt				"[09]"	// Halt movement script (infinitely loop it, but don't outright end it)
command jeq(addr)			"[0A {short addr}]"	// Jump to 'addr' if REG is zero (think "BEQ_a(addr)")
command jne(addr)			"[0B {short addr}]"                // Jump to 'addr' if REG is not zero (think "BNE_a(addr)")
command endtask			"[0C]"	// End background task (if this movement script is not a task, it just ends the script, I believe)
command mem16_and(addr, val)		"[0D {short addr} 00 {short val}]"	// *(uint16_t*)mem &= val
command mem16_or(addr, val)		"[0D {short addr} 01 {short val}]"	// *(uint16_t*)mem |= val
command mem16_add(addr, val)		"[0D {short addr} 02 {short val}]" // *(uint16_t*)mem += val
command mem16_xor(addr, val)		"[0D {short addr} 03 {short val}]" // *(uint16_t*)mem ^= val
command mov_var(var, value)		"[0E {byte var} {short value}]"	// Set a specific object VAR to immediate value ('var' must be in range 0..7)
command ontick_nop			"[0F]"	// Same as "ontick(0xC0943B)", but faster and saves 3 bytes
command multijmp(amount)		"[10 {byte amount}]"	// Switch on REG and JMP (think control code "[09 XX (YYYYYYYY)*XX]")
command multijsr(amount)		"[11 {byte amount}]"	// Switch on REG and JSR (think control code "[1F C0 XX (YYYYYYYY)*XX]")
command mov_mem8(addr, val)		"[12 {short addr} {byte val}]"	// Move 8-bit immediate value to memory
command endlasttask			"[13]"	// End last registered background task (if no background tasks are running, it just ends the movement script, I believe)
command var_and(var, val)		"[14 {byte var} 00 {short val}]"	// VAR &= val
command var_or(var, val)			"[14 {byte var} 01 {short val}]"	// VAR |= val
command var_add(var, val)		"[14 {byte var} 02 {short val}]"	// VAR += val
command var_xor(var, val)		"[14 {byte var} 03 {short val}]"	// VAR ^= val
command mov_mem16(addr, val)		"[15 {short addr} {short val}]"	// Move 16-bit immediate value to memory
command breakeq(addr)			"[16 {short addr}]"	// JEQ and decrement stack pointer by 3 (clean STARTLOOP stuff)
command breakne(addr)			"[17 {short addr}]"	// JNE and decrement stack pointer by 3 (clean STARTLOOP stuff)
command mem8_and(addr, val)		"[18 {short addr} 00 {byte val}]"	// *(uint8_t*)mem &= val
command mem8_or(addr, val)		"[18 {short addr} 01 {byte val}]"	// *(uint8_t*)mem |= val
command mem8_xor(addr, val)		"[18 {short addr} 03 {byte val}]"  // *(uint8_t*)mem ^= val
command mem8_add(addr, val)		"[18 {short addr} 02 {byte val}]"  // *(uint8_t*)mem += val
command mov_jmp(addr)			"[19 {short addr}]"	// Analogous to ASM JMP, but for movement scripts
command mov_jsr(addr)			"[1A {short addr}]"	// Analogous to ASM JSR, but for movement scripts
command mov_rts			"[1B]"	// Analogous to ASM RTS, but for movement scripts
command setsprmap(addr)		"[1C {adr24(addr)}]"	// Set pointer to spritemap data. This is kinda complicated, I also never used this, so I don't really know much about the "spritemap" format
command mov_reg_imm(val)		"[1D {short val}]"	// Move 16-bit immediate value to REG
command mov_reg_mem(addr)		"[1E {short addr}]"	// Move absolute memory address to REG
command mov_var_reg(var)		"[1F {byte var}]"		// Move REG to object VAR
command mov_reg_var(var)		"[20 {byte var}]"	// Move object VAR to REG
command wait_var(var)			"[21 {byte var}]"	// Wait (object VAR) frames
command ondraw(addr)			"[22 {short addr}]"	// Assign "draw object" callback function. Argument is a short ASM pointer in bank C0
command onposition(addr)		"[23 {short addr}]"	// Assign "calculate screen position" callback function. Argument is a short ASM pointer in bank C0
command startloop_reg			"[24]"	// Start a loop with REG iterations
command onmove(addr)			"[25 {short addr}]"	// Assign "move object" callback function. Argument is a short ASM pointer in bank C0
command setanim_var(var)		"[26 {byte var}]"	// Set amimation frame to object VAR
command reg_and(val)			"[27 00 {short val}]"	// REG &= val
command reg_or(val)			"[27 01 {short val}]"	// REG |= val
command reg_add(val)			"[27 02 {short val}]"              // REG += val
command reg_xor(val)			"[27 03 {short val}]"              // REG ^= val
command setxpos(val)			"[28 {short val}]"                 // Set object X position
command setypos(val)			"[29 {short val}]"                 // Set object Y position
command setzpos(val)			"[2A {short val}]"                 // Set object Z position (elevation)
command addxpos(val)			"[2B {short val}]"                 // Add 'val' to object X position (can be negative)
command addypos(val)			"[2C {short val}]"                 // Add 'val' to object Y position (can be negative)
command addzpos(val)			"[2D {short val}]"                 // Add 'val' to object Z position (elevation) (can be negative)
command addxvel(val)			"[2E {short val}]"                 // Add 'val' to object X velocity (can be negative)
command addyvel(val)			"[2F {short val}]"                 // Add 'val' to object Y velocity (can be negative)
command addzvel(val)			"[30 {short val}]"                 // Add 'val' to object Z velocity (elevation) (can be negative)
// 0x31 thru 0x38 are useless, they write to memory locations that are never even referenced in code
command zerovel			"[39]"	// Set object X, Y, Z velocities to zero
// 0x3A is useless, it writes to memory locations that are never even referenced in code
command setanim(anim)			"[3B {byte anim}]"                 // Set object animation frame
command incanim			"[3C]"                             // Increment object animation frame
command decanim			"[3D]"                             // Decrement object animation frame
command addanim(val)			"[3E {byte val}]"                  // Add 'val' to object animation frame (can be negative)
command setxvel(val)			"[3F {short val}]"                 // Set object X velocity
command setyvel(val)			"[40 {short val}]"                 // Set object Y velocity
command setzvel(val)			"[41 {short val}]"                 // Set object Z velocity (elevation)
command asmcall(addr)			"[42 {adr24(addr)}]"               // Call ASM routine
command priority(val)			"[43 {byte val}]"                  // Set object draw priority ('val' must be in range 0..3)
command wait_reg			"[44]"                             // Wait REG frames

// Special movement script codes
command unlock_text_script      mov_mem16(0x9641, 1) // Same as doing "asmcall(0xC46E46)", but slightly faster (wait until [1F 61])

// Movement script ASM calls
command movasm_fade(amount, speed) { // Fade screen
    asmcall(0xC09FAE)
    byte amount   // TIP: Use a positive value for a fade-in or a negative value for a fade-out
    byte speed
}

command movasm_mosaic_out(amount, speed, bgs) { // Fade-out with mosaic
    asmcall(0xC0AA07)
    short amount
    short speed
    short bgs
}

command movasm_create_obj(sprite, script) { // Create new object with sprite 'sprite' and script 'script'
    asmcall(0xC0A98B)
    short sprite
    short script
}

command movasm_set_speed(speed) { // Set movement speed of this object (8.8 fixed-point notation)
    asmcall(0xC0A685)
    short speed
}

command movasm_set_facing_anim(facing, anim) { // Set facing direction and animation frame for this object
    asmcall(0xC0AA6E)
    byte facing
    byte anim
}


/*
 * Movement subroutines
 */

// Movement script ASM calls
command movasm_destroy_thisobj  asmcall(0xC020F1)    // Destroy "this" object (object attached to this script)

// Set facing direction
// IMPORTANT: OVERWRITES REG!
command movasm_set_facedir(dir) {
    mov_reg_imm (dir)      // OVERWRITES REG!
    asmcall     (0xC0A66D) // Set facing direction to REG (does not change REG)
}

// Set movement direction (set facing and movement velocities)
// IMPORTANT: OVERWRITES REG!
command movasm_set_movedir(dir) {
    movasm_set_facedir (dir)
    asmcall            (0xC0C83B) // Set object velocity according to REG direction
}

// Walk for argument pixels
command movasm_walk_pixels(pixels) {
    asmcall (0xC0A6A2)
    short   pixels
}

// Calls an arbitrary block of text from within a movement pattern.
command movs_calltext(target) {
	mov_jslasm(0xC0A88D)
	"[{byte [2] target} 00 {short target}]"
}

// Cease walking animation.
command movs_stop {
	mov_tablewrite(4,1)	//"[0E 04 01 00]"
}

// Start walking animation.
command movs_go {
	mov_var(4,0)	//"[0E 04 00 00]"
}

// Gradually moves the active entry to the destination (X,Y), in pixel co-ordinates.
command movs_walker(x, y) {
	mov_tablewrite(0x06, x)
	mov_tablewrite(0x07, y)
	mov_jslmov_short(0xC3AB59, 0x01F6)
}

// Like movs_walker, but the direction the sprite faces seems to be... backwards.  Think moon-walking.  Or driving in reverse.
command movs_slider(x, y) {
	mov_tablewrite(0x06, x)
	mov_tablewrite(0x07, y)
	mov_jslmov_short(0xC3AB67, 0x01F6)
}

// Changes the active sprite using the current movement code's direction.
// At the moment, it only seems to work for the party or if the sprite is animated.
command movs_dir(dir) {
	mov_jslasm(0xC0A651) "[{byte dir}]"
}

// Another direction-setting subroutine.  Only works for currently animating sprites.
command movs_dirB(dir) {
	mov_loadtmp(dir)
	mov_jslasm(0xC0A65F)
}

// Continually walk the active sprite in the specified direction until interrupted.
command movs_dirwalker(dir) {
	mov_loadtmp(dir)
	mov_jslmov_short(0xC3AA1E, 0x01F6)	// "[1A 1E AA]" directional walker subroutine, same one used in the flyovers.
}

// This seems to make the sprite warp to the party, or perhaps the camera.
command movs_partyjump {
	mov_jslmov_short(0xC34E73, 0x01F6)
}

// Initialization routines.
command movs_init(speed, style) {
	mov_jslmov_short(0xC3AA38, 0x01F6)		// Sets the sprite up to be animated. (walking in place)
	mov_jslasm(0xC0A685) "[{short speed}]"
	mov_tablewrite(5, byte style)
}

command movs_init_noanim(speed, style) {
	mov_jslmov_short(0xC3DBE0, 0x01F6)		// Sets the sprite up to not be animated.
	mov_jslasm(0xC0A685) "[{short speed}]"
	mov_tablewrite(5, byte style)
}

Walking: {
setanim(0) // Set first frame
mov_wait(0x08) // Wait 8 frames
setanim(1) // Second frame
mov_wait(0x08) // More 8 frames
asmcall(Walking) // Loop 
}

movement_sub_AA38: {
    onmove(0xA37A)
    setanim(0)
    task(movement_task_walking_anim_8frames)
    zerovel
    mov_var(0x04, 0x00)
    mov_rtl
}
movement_task_walking_anim_8frames: {
    mov_wait(0x08)
    mov_reg_var(4)
    jne(movement_task_walking_anim_8frames_skip)
    setanim(2)
    asmcall(0xC0AAAC)
movement_task_walking_anim_8frames_skip:
    mov_wait(0x08)
    mov_reg_var(4)
    jne(movement_task_walking_anim_8frames)
    setanim(0)
    asmcall(0xC0AAAC)
    mov_jmp(movement_task_walking_anim_8frames)
}

/********** Copy of vanilla $C3AB44, because we can't just JSL there since it expects to be called via JSR **********/

MoveTowardsDest:
        asmcall (0xC46ADB) // Get angle towards (VAR6, VAR7)
        asmcall (0xC47044) // Set velocity based on movement speed and angle (returns the angle so it can be used subsequentially)
        asmcall (0xC46B0A) // Set movement direction based on angle
        asmcall (0xC0A65F) // Set facing direction to movement direction if not blocked?
        asmcall (0xC0A4BF) // Upload graphics?
        mov_rts

/********** Copy of vanilla $C3AB59, because we can't just JSL there since it expects to be called via JSR **********/

MoveUntilAtDest:
        mov_jsr (MoveTowardsDest)
        _loop:    mov_wait (0x01)
        asmcall  (0xC0A8DC) // Move towards (VAR6, VAR7) with radius check of VAR5 (KEEP FACING) -- Returns 0 if still not near (VAR6, VAR7) in radius VAR5
        jeq      (_loop)    // Loop again if still not reached destination
        zerovel             // Reached destination, now stop.
        mov_rts

/********** Helper command to call "MoveUntilAtDest" **********/

command movasm_travel_to_loc(radius, dest_x, dest_y) {

        mov_var (5, radius) // Move 'radius' into VAR5 -- NOTE: This needs to be at least `ceil(movement_speed)` to guarantee 'MoveUntilAtDest' returns
        mov_var (6, dest_x) // Move 'dest_x' into VAR6
        mov_var (7, dest_y) // Move 'dest_y' into VAR7
        mov_jsr (MoveUntilAtDest)
}

// Begin of PK Scramble specific stuff
// Needs to be in this file to encourage Coil Snake to put it in the same bank
CreditsNPC: {
  setxpos(4600) // Off stage left
  setypos(5736)
  movasm_set_facing_anim(2, 0)
  mov_jsl(movement_sub_AA38)
  movasm_set_speed(0xFF)
  movasm_travel_to_loc(1, 4730, 5736) // About to head foward left
  unlock_text_script
  movasm_set_speed(0x66)
  movasm_travel_to_loc(1, 4736, 5750) // Center front
  mov_wait(60)
  movasm_set_speed(0x88)
  movasm_travel_to_loc(1, 4770, 5736) // Went back right
  movasm_set_speed(0xCC)
  movasm_travel_to_loc(1, 4890, 5736) // Off stage right
  //mov_end
  halt
}

define credits_bonk_npc_x = 4816 // Crash into right side of stage
define credits_bonk_npc_y = 5748
CreditsNPCBonker: {
  setxpos(4600) // Off stage left
  setypos(5736)
  movasm_set_facing_anim(2, 0)
  mov_jsl(movement_sub_AA38)
  movasm_set_speed(0xFF)
  movasm_travel_to_loc(1, 4672, 5736) // Veering off course here
  movasm_set_speed(0x1FF)
  movasm_travel_to_loc(2, credits_bonk_npc_x, credits_bonk_npc_y) 
  unlock_text_script
  halt
}

CreditsNPCBonkerToasted: {
  setxpos(credits_bonk_npc_x)
  setypos(credits_bonk_npc_y)
  movasm_set_facing_anim(4, 0)
  unlock_text_script
  halt
}

CreditsNPCBonkerEnd: {
  setxpos(credits_bonk_npc_x)
  setypos(credits_bonk_npc_y)
  movasm_set_facing_anim(4, 0)
  mov_wait(4)
  unlock_text_script
  mov_jsl(movement_sub_AA38)
  movasm_set_speed(0x88)
  movasm_travel_to_loc(1, credits_bonk_npc_x, 5736) // Went back right
  movasm_set_speed(0xCC)
  movasm_travel_to_loc(1, 4890, 5736) // Off stage right
  halt
}

// Okay here comes the big one - final cast lineup and toothbrush check
define credits_stage_front_y = 5750
define credits_stage_mid_y = 5736
define credits_ness_stand_x = 4688
define credits_paula_stand_x = 4720
define credits_jeff_stand_x = 4752
define credits_poo_stand_x = 4784

CreditsFinalNessIntro: {
  setxpos(4800) // Off stage right, high
  setypos(5700)
  movasm_set_facing_anim(6, 0)
  mov_jsl(movement_sub_AA38)
  movasm_set_speed(0xFF)
  movasm_travel_to_loc(1, credits_ness_stand_x, credits_stage_mid_y)
  movasm_travel_to_loc(1, credits_ness_stand_x, credits_stage_front_y)
  unlock_text_script // Only one of them should have the unlock
  halt
}

CreditsFinalPaulaIntro: {
  setxpos(4600) // Off stage left, low
  setypos(credits_stage_mid_y)
  movasm_set_facing_anim(6, 0)
  mov_jsl(movement_sub_AA38)
  movasm_set_speed(0xFF)
  movasm_travel_to_loc(1, credits_paula_stand_x, credits_stage_mid_y)
  movasm_travel_to_loc(1, credits_paula_stand_x, credits_stage_front_y)
  halt
}

CreditsFinalJeffIntro: {
  setxpos(4670) // Off stage left, high
  setypos(5700)
  movasm_set_facing_anim(2, 0)
  mov_jsl(movement_sub_AA38)
  movasm_set_speed(0xFF)
  movasm_travel_to_loc(1, credits_jeff_stand_x, credits_stage_mid_y)
  movasm_travel_to_loc(1, credits_jeff_stand_x, credits_stage_front_y)
  halt
}

CreditsFinalPooIntro: {
  setxpos(4890) // Off stage right, low
  setypos(credits_stage_mid_y)
  movasm_set_facing_anim(2, 0)
  mov_jsl(movement_sub_AA38)
  movasm_set_speed(0xFF)
  movasm_travel_to_loc(1, credits_poo_stand_x, credits_stage_mid_y)
  movasm_travel_to_loc(1, credits_poo_stand_x, credits_stage_front_y)
  halt
}

CreditsFinalNessReappear: {
  setxpos(credits_ness_stand_x)
  setypos(credits_stage_front_y)
  movasm_set_facing_anim(4, 0)
  mov_jsl(movement_sub_AA38)
  unlock_text_script
  halt
}

CreditsFinalPaulaReappear: {
  setxpos(credits_paula_stand_x)
  setypos(credits_stage_front_y)
  movasm_set_facing_anim(4, 0)
  mov_jsl(movement_sub_AA38)
  unlock_text_script
  halt
}

CreditsFinalJeffReappear: {
  setxpos(credits_jeff_stand_x)
  setypos(credits_stage_front_y)
  movasm_set_facing_anim(4, 0)
  mov_jsl(movement_sub_AA38)
  unlock_text_script
  halt
}

CreditsFinalPooReappear: {
  setxpos(credits_poo_stand_x)
  setypos(credits_stage_front_y)
  movasm_set_facing_anim(4, 0)
  mov_jsl(movement_sub_AA38)
  unlock_text_script
  halt
}
